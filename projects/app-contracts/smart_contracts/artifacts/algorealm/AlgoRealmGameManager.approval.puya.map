{
  "version": 3,
  "sources": [
    "../../algorealm/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAqUK;;AAAA;AAAA;AAAA;;AAAA;AArUL;;;AAAA;AAAA;;AAqUK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AApBA;;AAAA;AAAA;AAAA;;AAAA;AAjTL;;;AAAA;AAAA;;AAiTK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AA3SL;;;AAAA;AAAA;;AA2SK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAxBA;;AAAA;AAAA;AAAA;;AAAA;AAnRL;;;AAAA;AAAA;;AAmRK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAtPL;;;AAAA;AAAA;;AAsPK;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AArCA;;AAAA;AAAA;AAAA;;AAAA;AAjNL;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAiNK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAtCA;;AAAA;AAAA;AAAA;;AAAA;AA3KL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;AA2KK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AArEA;;AAAA;AAAA;AAAA;;AAAA;AAtGL;;;AAAA;AAAA;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAsGK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA5CA;;AAAA;AAAA;AAAA;;AAAA;AA1DL;;;AAAA;AAAA;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;;AA0DK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA5BA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AA9BL;;;AAAA;;;AA8BK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGG;;AAA2B;AAA3B;AACA;;AAAiC;AAAjC;AACA;;AAA4B;AAA5B;AACA;;AAAmC;AAAnC;AACA;;AAAyB;;AAAzB;AACO;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAER;;;AAIW;;AAAqB;AAArB;AAAX;;;AAE8B;;AAAlB;;AAAgC;AAAhC;AACuB;;AAAvB;;AAAqC;AAArC;AAC2B;;AAA3B;AAAyC;AAAzC;AACmB;;AAAnB;AAAiC;AAAjC;AACO;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAIkB;;AAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAX;;;AACmB;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAGc;;AAAlB;;AAAgC;AAAhC;AACuB;;AAAvB;;AAAqC;AAArC;AAC2B;;AAA3B;AAAyC;AAAzC;AACmB;;AAAnB;AAAiC;;;AAAjC;AAEA;AAAA;;AAAA;AAAA;AAA4B;AAA5B;AAAA;;AAAA;AAAA;AAEA;;AAAA;AACO;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAER;;;AAYe;;AAAc;AAAA;;AAAA;AAAA;AAAd;AAAP;AACO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AAKuB;;AAAvB;;AAAa;AACS;;AAAA;;AAAA;AAAtB;AAAY;AAED;AAUH;;AAJI;;AACA;;;;;;;;;;;;;;AAFO;;;AADN;;;AADH;;;AARO;;;;;;;;;;;;;;;AAKN;;;;;AAAA;;;AAkBX;AAAA;;AAAA;AAAA;AAAkC;AAAlC;AAAA;;AAAA;AAAA;AAEI;;;;;;;;;;;;;;AAAJ;AACA;AAER;;;AAYY;;AADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AAKA;;AAA6B;;AAA7B;AAGO;AAAP;AAGO;;AAAwB;;AAAxB;AAAP;AAGoD;;AAA3B;AAAA;AAAA;AAAA;AAEI;AAAA;;AAAA;AAAA;AAAzB;;AAAA;AADJ;AAKA;;AAAyB;;AAAzB;AACO;AAAP;AAOuB;;AAAvB;;AAAa;AAEC;;;;;;;;;;;;;;;;;AAAV;;AAAA;AADJ;AAAgB;AAKK;AAUb;;AAJI;;AACA;;;;;;;;;;;;;;AAFO;;;AADN;;;AADH;;;AADI;;;;;;;;;;;;AAXG;;;;;;;;;;;;;;;;;;AASI;;;;;AAAA;;;AAmBoB;AAAyB;AAAzB;AAAd;;AAA3B;AAAA;;AAAA;AAEI;;;;;;;;;;;;;;;;AAAJ;AACA;AAER;;;AAQkC;;AAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AACO;;AAAuB;;AAAvB;AAAP;AAKuB;;AAAvB;;AAAa;AAEC;;;;;;;;;;;AAAV;;AAAA;AADJ;AAAgB;AAKD;AAQP;;AAFI;;AACA;;;;;;;;;AAFO;;;AADN;;;AADH;;;AADI;;;;;;;;;;;;AAVO;;;;;;;;;;;;;;;;;AAQN;;;;;AAAA;;;AAeX;;;;;;;;;;;;;;;;;;;;;;AAAJ;AACA;AAER;;;AAQkC;;AAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AAQuB;;AAAkB;;AAA5B;AACY;;AAAzB;AAAe;AAED;AAON;;AADI;;;;;;;;AADO;;;AADN;;;AADH;;;AADI;;;;;;;;;;;;AAPM;;;;AAKN;;;;;AAAA;;;AAeV;;;;;;;;;;;;;;AAAJ;AACA;AAER;;;AAGe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AAEI;;AAAA;AAAA;;AAAA;AAAA;AACA;;AAAA;AAAA;;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;AAHJ;AAUI;;AAAc;AAAA;;AAAA;AAAA;AAAd;AADJ;AAGA;AAAA;;AAAA;AAAA;AAA6B;AAA7B;AAAA;;AAAA;;AAAA;AACI;;;;;;;;;;;;;;;;;AAAJ;AACA;AAMI;AAAA;;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAHJ;AAMR;;;AAMkC;;AAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AAGA;;AAAmB;;AAAnB;AACO;;AAAA;AAAP;AAIA;AAIQ;;AAHW;;;;;;AACF;;;;;AAFjB;;;;;;AAAA;AAOI;;;;;;;;;;;;;;AAAJ;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAER;;;AAGe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AACO;;AAAA;AAAA;AAAA;AAAA;AAAoC;AAAA;;AAAA;AAAA;AAA3C;AAER;;;AAaQ;;AAAgB;;AAAhB;AAEG;AAAX;;;AACmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAEO;;;;;;;;;;;;;;;;AAAP;AAEZ;;;AAOQ;;AAAkB;;AAAlB;AAEG;AAAX;;;AACmB;;;AAAP;AAEO;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.algorealm.contract.AlgoRealmGameManager.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 3"
    },
    "6": {
      "op": "bytecblock 0x151f7c75 \"is_registered\" 0x00 \"player_recovery_count\" \"total_players\" \"total_items_created\" \"current_season\" 0x4f574e45523a \"max_recovery_per_item\" \"game_master\" \"player_level\" \"player_experience\" 0x435241465445445f4954454d"
    },
    "185": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "187": {
      "op": "bz main_after_if_else@18",
      "stack_out": []
    },
    "190": {
      "op": "pushbytess 0xb35aac3b 0x843d18d5 0x2a618480 0xebe93f8b 0xa0d134d0 0x8bcde396 0x45d65ecb 0x3b52751f 0x479a7f97 0x3ad5edd5 0x02b83d00 0xfdff42a4 0x993b6c6f // method \"initialize_game()string\", method \"register_player(string)string\", method \"create_game_item(account,string,string,string,uint64,uint64,string)uint64\", method \"recover_lost_item(asset,byte[],account)uint64\", method \"seasonal_event_reissue(string,byte[],account)uint64\", method \"craft_items(asset,asset,uint64)uint64\", method \"get_player_stats(account)(uint64,uint64,uint64)\", method \"advance_season()uint64\", method \"get_game_info()(uint64,uint64,uint64)\", method \"claim_item(asset)string\", method \"get_recovery_status(account)(uint64,uint64)\", method \"get_item_ownership_info(asset)string\", method \"check_item_exists(asset)bool\"",
      "defined_out": [
        "Method(advance_season()uint64)",
        "Method(check_item_exists(asset)bool)",
        "Method(claim_item(asset)string)",
        "Method(craft_items(asset,asset,uint64)uint64)",
        "Method(create_game_item(account,string,string,string,uint64,uint64,string)uint64)",
        "Method(get_game_info()(uint64,uint64,uint64))",
        "Method(get_item_ownership_info(asset)string)",
        "Method(get_player_stats(account)(uint64,uint64,uint64))",
        "Method(get_recovery_status(account)(uint64,uint64))",
        "Method(initialize_game()string)",
        "Method(recover_lost_item(asset,byte[],account)uint64)",
        "Method(register_player(string)string)",
        "Method(seasonal_event_reissue(string,byte[],account)uint64)"
      ],
      "stack_out": [
        "Method(initialize_game()string)",
        "Method(register_player(string)string)",
        "Method(create_game_item(account,string,string,string,uint64,uint64,string)uint64)",
        "Method(recover_lost_item(asset,byte[],account)uint64)",
        "Method(seasonal_event_reissue(string,byte[],account)uint64)",
        "Method(craft_items(asset,asset,uint64)uint64)",
        "Method(get_player_stats(account)(uint64,uint64,uint64))",
        "Method(advance_season()uint64)",
        "Method(get_game_info()(uint64,uint64,uint64))",
        "Method(claim_item(asset)string)",
        "Method(get_recovery_status(account)(uint64,uint64))",
        "Method(get_item_ownership_info(asset)string)",
        "Method(check_item_exists(asset)bool)"
      ]
    },
    "257": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(advance_season()uint64)",
        "Method(check_item_exists(asset)bool)",
        "Method(claim_item(asset)string)",
        "Method(craft_items(asset,asset,uint64)uint64)",
        "Method(create_game_item(account,string,string,string,uint64,uint64,string)uint64)",
        "Method(get_game_info()(uint64,uint64,uint64))",
        "Method(get_item_ownership_info(asset)string)",
        "Method(get_player_stats(account)(uint64,uint64,uint64))",
        "Method(get_recovery_status(account)(uint64,uint64))",
        "Method(initialize_game()string)",
        "Method(recover_lost_item(asset,byte[],account)uint64)",
        "Method(register_player(string)string)",
        "Method(seasonal_event_reissue(string,byte[],account)uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(initialize_game()string)",
        "Method(register_player(string)string)",
        "Method(create_game_item(account,string,string,string,uint64,uint64,string)uint64)",
        "Method(recover_lost_item(asset,byte[],account)uint64)",
        "Method(seasonal_event_reissue(string,byte[],account)uint64)",
        "Method(craft_items(asset,asset,uint64)uint64)",
        "Method(get_player_stats(account)(uint64,uint64,uint64))",
        "Method(advance_season()uint64)",
        "Method(get_game_info()(uint64,uint64,uint64))",
        "Method(claim_item(asset)string)",
        "Method(get_recovery_status(account)(uint64,uint64))",
        "Method(get_item_ownership_info(asset)string)",
        "Method(check_item_exists(asset)bool)",
        "tmp%2#0"
      ]
    },
    "260": {
      "op": "match main_initialize_game_route@5 main_register_player_route@6 main_create_game_item_route@7 main_recover_lost_item_route@8 main_seasonal_event_reissue_route@9 main_craft_items_route@10 main_get_player_stats_route@11 main_advance_season_route@12 main_get_game_info_route@13 main_claim_item_route@14 main_get_recovery_status_route@15 main_get_item_ownership_info_route@16 main_check_item_exists_route@17",
      "stack_out": []
    },
    "288": {
      "block": "main_after_if_else@18",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "289": {
      "op": "return",
      "stack_out": []
    },
    "290": {
      "block": "main_check_item_exists_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "292": {
      "op": "!",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "293": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "294": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "296": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "297": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%10#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%10#0"
      ]
    },
    "300": {
      "op": "btoi",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "301": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "303": {
      "callsub": "smart_contracts.algorealm.contract.AlgoRealmGameManager.check_item_exists",
      "op": "callsub check_item_exists",
      "defined_out": [
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0"
      ]
    },
    "306": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0",
        "0x151f7c75"
      ]
    },
    "307": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%109#0"
      ]
    },
    "308": {
      "op": "concat",
      "defined_out": [
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%110#0"
      ]
    },
    "309": {
      "op": "log",
      "stack_out": []
    },
    "310": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "311": {
      "op": "return",
      "stack_out": []
    },
    "312": {
      "block": "main_get_item_ownership_info_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "314": {
      "op": "!",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "315": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "316": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "318": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "319": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%9#0"
      ]
    },
    "322": {
      "op": "btoi",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "323": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "325": {
      "callsub": "smart_contracts.algorealm.contract.AlgoRealmGameManager.get_item_ownership_info",
      "op": "callsub get_item_ownership_info",
      "defined_out": [
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0"
      ]
    },
    "328": {
      "op": "dup",
      "defined_out": [
        "to_encode%8#0",
        "to_encode%8#0 (copy)"
      ],
      "stack_out": [
        "to_encode%8#0",
        "to_encode%8#0 (copy)"
      ]
    },
    "329": {
      "op": "len",
      "defined_out": [
        "length%3#0",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0",
        "length%3#0"
      ]
    },
    "330": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0",
        "as_bytes%3#0"
      ]
    },
    "331": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%3#0",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0",
        "length_uint16%3#0"
      ]
    },
    "334": {
      "op": "swap",
      "stack_out": [
        "length_uint16%3#0",
        "to_encode%8#0"
      ]
    },
    "335": {
      "op": "concat",
      "defined_out": [
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0"
      ]
    },
    "336": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "0x151f7c75"
      ]
    },
    "337": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%3#0"
      ]
    },
    "338": {
      "op": "concat",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "339": {
      "op": "log",
      "stack_out": []
    },
    "340": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "341": {
      "op": "return",
      "stack_out": []
    },
    "342": {
      "block": "main_get_recovery_status_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "344": {
      "op": "!",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "345": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "346": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "348": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "349": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%8#0"
      ]
    },
    "352": {
      "op": "btoi",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "353": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "355": {
      "callsub": "smart_contracts.algorealm.contract.AlgoRealmGameManager.get_recovery_status",
      "op": "callsub get_recovery_status",
      "defined_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%7#0"
      ],
      "stack_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%7#0"
      ]
    },
    "358": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%6#0"
      ]
    },
    "359": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%11#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%11#0"
      ]
    },
    "360": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%11#0",
        "elements_to_encode%7#0"
      ]
    },
    "361": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%11#0",
        "val_as_bytes%12#0"
      ],
      "stack_out": [
        "val_as_bytes%11#0",
        "val_as_bytes%12#0"
      ]
    },
    "362": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%10#0"
      ]
    },
    "363": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "0x151f7c75"
      ]
    },
    "364": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "365": {
      "op": "concat",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "366": {
      "op": "log",
      "stack_out": []
    },
    "367": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "368": {
      "op": "return",
      "stack_out": []
    },
    "369": {
      "block": "main_claim_item_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "371": {
      "op": "!",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "372": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "373": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "375": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "376": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%7#0"
      ]
    },
    "379": {
      "op": "btoi",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "380": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "382": {
      "callsub": "smart_contracts.algorealm.contract.AlgoRealmGameManager.claim_item",
      "op": "callsub claim_item",
      "defined_out": [
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0"
      ]
    },
    "385": {
      "op": "dup",
      "defined_out": [
        "to_encode%7#0",
        "to_encode%7#0 (copy)"
      ],
      "stack_out": [
        "to_encode%7#0",
        "to_encode%7#0 (copy)"
      ]
    },
    "386": {
      "op": "len",
      "defined_out": [
        "length%2#0",
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0",
        "length%2#0"
      ]
    },
    "387": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0",
        "as_bytes%2#0"
      ]
    },
    "388": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%2#0",
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0",
        "length_uint16%2#0"
      ]
    },
    "391": {
      "op": "swap",
      "stack_out": [
        "length_uint16%2#0",
        "to_encode%7#0"
      ]
    },
    "392": {
      "op": "concat",
      "defined_out": [
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0"
      ]
    },
    "393": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "0x151f7c75"
      ]
    },
    "394": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%2#0"
      ]
    },
    "395": {
      "op": "concat",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "396": {
      "op": "log",
      "stack_out": []
    },
    "397": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "398": {
      "op": "return",
      "stack_out": []
    },
    "399": {
      "block": "main_get_game_info_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "401": {
      "op": "!",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "402": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "403": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "405": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "406": {
      "callsub": "smart_contracts.algorealm.contract.AlgoRealmGameManager.get_game_info",
      "op": "callsub get_game_info",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ]
    },
    "409": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%3#0"
      ]
    },
    "411": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%8#0"
      ]
    },
    "412": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%5#0",
        "val_as_bytes%8#0",
        "elements_to_encode%4#0"
      ]
    },
    "414": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%5#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ]
    },
    "415": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "elements_to_encode%5#0"
      ]
    },
    "417": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%10#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0"
      ]
    },
    "418": {
      "op": "cover 2",
      "stack_out": [
        "val_as_bytes%10#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ]
    },
    "420": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "val_as_bytes%10#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "421": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%10#0"
      ]
    },
    "422": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0"
      ]
    },
    "423": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "0x151f7c75"
      ]
    },
    "424": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "425": {
      "op": "concat",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "426": {
      "op": "log",
      "stack_out": []
    },
    "427": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "428": {
      "op": "return",
      "stack_out": []
    },
    "429": {
      "block": "main_advance_season_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "431": {
      "op": "!",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "432": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "433": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "435": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "436": {
      "callsub": "smart_contracts.algorealm.contract.AlgoRealmGameManager.advance_season",
      "op": "callsub advance_season",
      "defined_out": [
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0"
      ]
    },
    "439": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "val_as_bytes%7#0"
      ]
    },
    "440": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "val_as_bytes%7#0",
        "0x151f7c75"
      ]
    },
    "441": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%7#0"
      ]
    },
    "442": {
      "op": "concat",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "443": {
      "op": "log",
      "stack_out": []
    },
    "444": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "445": {
      "op": "return",
      "stack_out": []
    },
    "446": {
      "block": "main_get_player_stats_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "448": {
      "op": "!",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "449": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "450": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "452": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "453": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%6#0"
      ]
    },
    "456": {
      "op": "btoi",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "457": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "459": {
      "callsub": "smart_contracts.algorealm.contract.AlgoRealmGameManager.get_player_stats",
      "op": "callsub get_player_stats",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0"
      ]
    },
    "462": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%0#0"
      ]
    },
    "464": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "val_as_bytes%4#0"
      ]
    },
    "465": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%2#0",
        "val_as_bytes%4#0",
        "elements_to_encode%1#0"
      ]
    },
    "467": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%2#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ]
    },
    "468": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "elements_to_encode%2#0"
      ]
    },
    "470": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ]
    },
    "471": {
      "op": "cover 2",
      "stack_out": [
        "val_as_bytes%6#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ]
    },
    "473": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "474": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%6#0"
      ]
    },
    "475": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "476": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "0x151f7c75"
      ]
    },
    "477": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "478": {
      "op": "concat",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "479": {
      "op": "log",
      "stack_out": []
    },
    "480": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "481": {
      "op": "return",
      "stack_out": []
    },
    "482": {
      "block": "main_craft_items_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "484": {
      "op": "!",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "485": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "486": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "488": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "489": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%4#0"
      ]
    },
    "492": {
      "op": "btoi",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "493": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "495": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%5#0",
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "reinterpret_bytes[1]%5#0"
      ]
    },
    "498": {
      "op": "btoi",
      "defined_out": [
        "tmp%60#0",
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "tmp%61#0"
      ]
    },
    "499": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%60#0",
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "tmp%62#0"
      ]
    },
    "501": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%60#0",
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "tmp%62#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "504": {
      "op": "btoi",
      "defined_out": [
        "tmp%60#0",
        "tmp%62#0",
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "tmp%62#0",
        "tmp%63#0"
      ]
    },
    "505": {
      "callsub": "smart_contracts.algorealm.contract.AlgoRealmGameManager.craft_items",
      "op": "callsub craft_items",
      "defined_out": [
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0"
      ]
    },
    "508": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0"
      ]
    },
    "509": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "0x151f7c75"
      ]
    },
    "510": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ]
    },
    "511": {
      "op": "concat",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "512": {
      "op": "log",
      "stack_out": []
    },
    "513": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "514": {
      "op": "return",
      "stack_out": []
    },
    "515": {
      "block": "main_seasonal_event_reissue_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "517": {
      "op": "!",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "518": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "519": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "521": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "522": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "525": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "528": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%49#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "tmp%50#0"
      ]
    },
    "531": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%49#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "tmp%51#0"
      ]
    },
    "534": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%3#0",
        "tmp%49#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "tmp%51#0",
        "reinterpret_bytes[1]%3#0"
      ]
    },
    "537": {
      "op": "btoi",
      "defined_out": [
        "tmp%49#0",
        "tmp%51#0",
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "tmp%51#0",
        "tmp%52#0"
      ]
    },
    "538": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%49#0",
        "tmp%51#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "tmp%51#0",
        "tmp%53#0"
      ]
    },
    "540": {
      "callsub": "smart_contracts.algorealm.contract.AlgoRealmGameManager.seasonal_event_reissue",
      "op": "callsub seasonal_event_reissue",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "543": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "544": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "545": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "546": {
      "op": "concat",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "547": {
      "op": "log",
      "stack_out": []
    },
    "548": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "549": {
      "op": "return",
      "stack_out": []
    },
    "550": {
      "block": "main_recover_lost_item_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "552": {
      "op": "!",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "553": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "554": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "556": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "557": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "560": {
      "op": "btoi",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "561": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "563": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%39#0"
      ]
    },
    "566": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%38#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%40#0"
      ]
    },
    "569": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%2#0",
        "tmp%38#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%40#0",
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "572": {
      "op": "btoi",
      "defined_out": [
        "tmp%38#0",
        "tmp%40#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%40#0",
        "tmp%41#0"
      ]
    },
    "573": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%38#0",
        "tmp%40#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%40#0",
        "tmp%42#0"
      ]
    },
    "575": {
      "callsub": "smart_contracts.algorealm.contract.AlgoRealmGameManager.recover_lost_item",
      "op": "callsub recover_lost_item",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "578": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "579": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "580": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "581": {
      "op": "concat",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "582": {
      "op": "log",
      "stack_out": []
    },
    "583": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "584": {
      "op": "return",
      "stack_out": []
    },
    "585": {
      "block": "main_create_game_item_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "587": {
      "op": "!",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "588": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "589": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "591": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "592": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "595": {
      "op": "btoi",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "596": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "598": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "601": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%21#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%23#0"
      ]
    },
    "604": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%21#0",
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%23#0",
        "tmp%24#0"
      ]
    },
    "607": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0"
      ]
    },
    "610": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%26#0"
      ]
    },
    "613": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0"
      ]
    },
    "616": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "619": {
      "op": "btoi",
      "defined_out": [
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%28#0"
      ]
    },
    "620": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%28#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "623": {
      "op": "btoi",
      "defined_out": [
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0"
      ]
    },
    "624": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "627": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%31#0"
      ]
    },
    "630": {
      "callsub": "smart_contracts.algorealm.contract.AlgoRealmGameManager.create_game_item",
      "op": "callsub create_game_item",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "633": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "634": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "635": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "636": {
      "op": "concat",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "637": {
      "op": "log",
      "stack_out": []
    },
    "638": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "639": {
      "op": "return",
      "stack_out": []
    },
    "640": {
      "block": "main_register_player_route@6",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "641": {
      "op": "txn OnCompletion",
      "defined_out": [
        "1",
        "tmp%8#0"
      ],
      "stack_out": [
        "1",
        "tmp%8#0"
      ]
    },
    "643": {
      "op": "shl",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "644": {
      "op": "intc_2 // 3",
      "defined_out": [
        "3",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "3"
      ]
    },
    "645": {
      "op": "&",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "646": {
      "error": "OnCompletion is not one of NoOp, OptIn",
      "op": "assert // OnCompletion is not one of NoOp, OptIn",
      "stack_out": []
    },
    "647": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "649": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "650": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "653": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "656": {
      "callsub": "smart_contracts.algorealm.contract.AlgoRealmGameManager.register_player",
      "op": "callsub register_player",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "659": {
      "op": "dup",
      "defined_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "660": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length%1#0"
      ]
    },
    "661": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "as_bytes%1#0"
      ]
    },
    "662": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length_uint16%1#0"
      ]
    },
    "665": {
      "op": "swap",
      "stack_out": [
        "length_uint16%1#0",
        "to_encode%1#0"
      ]
    },
    "666": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "667": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "668": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ]
    },
    "669": {
      "op": "concat",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "670": {
      "op": "log",
      "stack_out": []
    },
    "671": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "672": {
      "op": "return",
      "stack_out": []
    },
    "673": {
      "block": "main_initialize_game_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "675": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "676": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "677": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "679": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "680": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "681": {
      "callsub": "smart_contracts.algorealm.contract.AlgoRealmGameManager.initialize_game",
      "op": "callsub initialize_game",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "684": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "685": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "686": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "687": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "690": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ]
    },
    "691": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "692": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "693": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "694": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "695": {
      "op": "log",
      "stack_out": []
    },
    "696": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "697": {
      "op": "return",
      "stack_out": []
    },
    "698": {
      "subroutine": "smart_contracts.algorealm.contract.AlgoRealmGameManager.initialize_game",
      "params": {},
      "block": "initialize_game",
      "stack_in": [],
      "op": "bytec 4 // \"total_players\"",
      "defined_out": [
        "\"total_players\""
      ],
      "stack_out": [
        "\"total_players\""
      ]
    },
    "700": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"total_players\"",
        "0"
      ],
      "stack_out": [
        "\"total_players\"",
        "0"
      ]
    },
    "701": {
      "op": "app_global_put",
      "stack_out": []
    },
    "702": {
      "op": "bytec 5 // \"total_items_created\"",
      "defined_out": [
        "\"total_items_created\""
      ],
      "stack_out": [
        "\"total_items_created\""
      ]
    },
    "704": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_items_created\"",
        "0"
      ]
    },
    "705": {
      "op": "app_global_put",
      "stack_out": []
    },
    "706": {
      "op": "bytec 6 // \"current_season\"",
      "defined_out": [
        "\"current_season\""
      ],
      "stack_out": [
        "\"current_season\""
      ]
    },
    "708": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"current_season\"",
        "1"
      ],
      "stack_out": [
        "\"current_season\"",
        "1"
      ]
    },
    "709": {
      "op": "app_global_put",
      "stack_out": []
    },
    "710": {
      "op": "bytec 8 // \"max_recovery_per_item\"",
      "defined_out": [
        "\"max_recovery_per_item\""
      ],
      "stack_out": [
        "\"max_recovery_per_item\""
      ]
    },
    "712": {
      "op": "intc_2 // 3",
      "defined_out": [
        "\"max_recovery_per_item\"",
        "3"
      ],
      "stack_out": [
        "\"max_recovery_per_item\"",
        "3"
      ]
    },
    "713": {
      "op": "app_global_put",
      "stack_out": []
    },
    "714": {
      "op": "bytec 9 // \"game_master\"",
      "defined_out": [
        "\"game_master\""
      ],
      "stack_out": [
        "\"game_master\""
      ]
    },
    "716": {
      "op": "txn Sender",
      "defined_out": [
        "\"game_master\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "\"game_master\"",
        "materialized_values%0#0"
      ]
    },
    "718": {
      "op": "app_global_put",
      "stack_out": []
    },
    "719": {
      "op": "pushbytes \"AlgoRealm initialized!\"",
      "defined_out": [
        "\"AlgoRealm initialized!\""
      ],
      "stack_out": [
        "\"AlgoRealm initialized!\""
      ]
    },
    "743": {
      "retsub": true,
      "op": "retsub"
    },
    "744": {
      "subroutine": "smart_contracts.algorealm.contract.AlgoRealmGameManager.register_player",
      "params": {
        "player_name#0": "bytes"
      },
      "block": "register_player",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "747": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "749": {
      "op": "intc_1 // OptIn",
      "defined_out": [
        "OptIn",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "OptIn"
      ]
    },
    "750": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "751": {
      "op": "bz register_player_after_if_else@2",
      "stack_out": []
    },
    "754": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "756": {
      "op": "bytec 10 // \"player_level\"",
      "defined_out": [
        "\"player_level\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\"player_level\""
      ]
    },
    "758": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"player_level\"",
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\"player_level\"",
        "0"
      ]
    },
    "759": {
      "op": "app_local_put",
      "stack_out": []
    },
    "760": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "762": {
      "op": "bytec 11 // \"player_experience\"",
      "defined_out": [
        "\"player_experience\"",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "\"player_experience\""
      ]
    },
    "764": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0",
        "\"player_experience\"",
        "0"
      ]
    },
    "765": {
      "op": "app_local_put",
      "stack_out": []
    },
    "766": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "768": {
      "op": "bytec_3 // \"player_recovery_count\"",
      "defined_out": [
        "\"player_recovery_count\"",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "\"player_recovery_count\""
      ]
    },
    "769": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%4#0",
        "\"player_recovery_count\"",
        "0"
      ]
    },
    "770": {
      "op": "app_local_put",
      "stack_out": []
    },
    "771": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "773": {
      "op": "bytec_1 // \"is_registered\"",
      "defined_out": [
        "\"is_registered\"",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "\"is_registered\""
      ]
    },
    "774": {
      "op": "bytec_2 // 0x00",
      "defined_out": [
        "\"is_registered\"",
        "0x00",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "\"is_registered\"",
        "0x00"
      ]
    },
    "775": {
      "op": "app_local_put",
      "stack_out": []
    },
    "776": {
      "op": "pushbytes \"Opted in to AlgoRealm!\"",
      "defined_out": [
        "\"Opted in to AlgoRealm!\""
      ],
      "stack_out": [
        "\"Opted in to AlgoRealm!\""
      ]
    },
    "800": {
      "retsub": true,
      "op": "retsub"
    },
    "801": {
      "block": "register_player_after_if_else@2",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "803": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "804": {
      "op": "bytec_1 // \"is_registered\"",
      "defined_out": [
        "\"is_registered\"",
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0",
        "\"is_registered\""
      ]
    },
    "805": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "806": {
      "error": "check self.is_registered exists for account",
      "op": "assert // check self.is_registered exists for account",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "807": {
      "op": "bytec_2 // 0x00",
      "defined_out": [
        "0x00",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x00"
      ]
    },
    "808": {
      "op": "!=",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "809": {
      "op": "bz register_player_after_if_else@4",
      "stack_out": []
    },
    "812": {
      "op": "pushbytes \"Player already registered\"",
      "defined_out": [
        "\"Player already registered\""
      ],
      "stack_out": [
        "\"Player already registered\""
      ]
    },
    "839": {
      "retsub": true,
      "op": "retsub"
    },
    "840": {
      "block": "register_player_after_if_else@4",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "842": {
      "op": "bytec 10 // \"player_level\"",
      "defined_out": [
        "\"player_level\"",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "\"player_level\""
      ]
    },
    "844": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"player_level\"",
        "1",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "\"player_level\"",
        "1"
      ]
    },
    "845": {
      "op": "app_local_put",
      "stack_out": []
    },
    "846": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "848": {
      "op": "bytec 11 // \"player_experience\"",
      "defined_out": [
        "\"player_experience\"",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "\"player_experience\""
      ]
    },
    "850": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"player_experience\"",
        "0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "\"player_experience\"",
        "0"
      ]
    },
    "851": {
      "op": "app_local_put",
      "stack_out": []
    },
    "852": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "854": {
      "op": "bytec_3 // \"player_recovery_count\"",
      "defined_out": [
        "\"player_recovery_count\"",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "\"player_recovery_count\""
      ]
    },
    "855": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%10#0",
        "\"player_recovery_count\"",
        "0"
      ]
    },
    "856": {
      "op": "app_local_put",
      "stack_out": []
    },
    "857": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "859": {
      "op": "bytec_1 // \"is_registered\"",
      "defined_out": [
        "\"is_registered\"",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "\"is_registered\""
      ]
    },
    "860": {
      "op": "pushbytes 0x80",
      "defined_out": [
        "\"is_registered\"",
        "0x80",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "\"is_registered\"",
        "0x80"
      ]
    },
    "863": {
      "op": "app_local_put",
      "stack_out": []
    },
    "864": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "865": {
      "op": "bytec 4 // \"total_players\"",
      "defined_out": [
        "\"total_players\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_players\""
      ]
    },
    "867": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "868": {
      "error": "check self.total_players exists",
      "op": "assert // check self.total_players exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "869": {
      "op": "intc_1 // 1",
      "stack_out": [
        "maybe_value%1#0",
        "1"
      ]
    },
    "870": {
      "op": "+",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "871": {
      "op": "bytec 4 // \"total_players\"",
      "stack_out": [
        "materialized_values%0#0",
        "\"total_players\""
      ]
    },
    "873": {
      "op": "swap",
      "stack_out": [
        "\"total_players\"",
        "materialized_values%0#0"
      ]
    },
    "874": {
      "op": "app_global_put",
      "stack_out": []
    },
    "875": {
      "op": "frame_dig -1",
      "defined_out": [
        "player_name#0 (copy)"
      ],
      "stack_out": [
        "player_name#0 (copy)"
      ]
    },
    "877": {
      "op": "log",
      "stack_out": []
    },
    "878": {
      "op": "pushbytes \"Welcome to AlgoRealm!\"",
      "defined_out": [
        "\"Welcome to AlgoRealm!\""
      ],
      "stack_out": [
        "\"Welcome to AlgoRealm!\""
      ]
    },
    "901": {
      "retsub": true,
      "op": "retsub"
    },
    "902": {
      "subroutine": "smart_contracts.algorealm.contract.AlgoRealmGameManager.create_game_item",
      "params": {
        "recipient#0": "bytes",
        "item_name#0": "bytes",
        "item_type#0": "bytes",
        "rarity#0": "bytes",
        "attack_power#0": "uint64",
        "defense_power#0": "uint64",
        "special_effect#0": "bytes"
      },
      "block": "create_game_item",
      "stack_in": [],
      "op": "proto 7 1"
    },
    "905": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "907": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "908": {
      "op": "bytec 9 // \"game_master\"",
      "defined_out": [
        "\"game_master\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"game_master\""
      ]
    },
    "910": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "911": {
      "error": "check self.game_master exists",
      "op": "assert // check self.game_master exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "912": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "913": {
      "error": "Only game master can create items",
      "op": "assert // Only game master can create items",
      "stack_out": []
    },
    "914": {
      "op": "frame_dig -7",
      "defined_out": [
        "recipient#0 (copy)"
      ],
      "stack_out": [
        "recipient#0 (copy)"
      ]
    },
    "916": {
      "op": "intc_0 // 0",
      "stack_out": [
        "recipient#0 (copy)",
        "0"
      ]
    },
    "917": {
      "op": "bytec_1 // \"is_registered\"",
      "defined_out": [
        "\"is_registered\"",
        "0",
        "recipient#0 (copy)"
      ],
      "stack_out": [
        "recipient#0 (copy)",
        "0",
        "\"is_registered\""
      ]
    },
    "918": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "919": {
      "error": "check self.is_registered exists for account",
      "op": "assert // check self.is_registered exists for account",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "920": {
      "op": "bytec_2 // 0x00",
      "defined_out": [
        "0x00",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "0x00"
      ]
    },
    "921": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "922": {
      "error": "Recipient must be registered player",
      "op": "assert // Recipient must be registered player",
      "stack_out": []
    },
    "923": {
      "op": "bytec 7 // 0x4f574e45523a",
      "defined_out": [
        "0x4f574e45523a"
      ],
      "stack_out": [
        "0x4f574e45523a"
      ]
    },
    "925": {
      "op": "frame_dig -7",
      "stack_out": [
        "0x4f574e45523a",
        "recipient#0 (copy)"
      ]
    },
    "927": {
      "op": "concat",
      "defined_out": [
        "owner_info#0"
      ],
      "stack_out": [
        "owner_info#0"
      ]
    },
    "928": {
      "op": "frame_dig -6",
      "defined_out": [
        "item_name#0 (copy)",
        "owner_info#0"
      ],
      "stack_out": [
        "owner_info#0",
        "item_name#0 (copy)"
      ]
    },
    "930": {
      "op": "frame_dig -4",
      "defined_out": [
        "item_name#0 (copy)",
        "owner_info#0",
        "rarity#0 (copy)"
      ],
      "stack_out": [
        "owner_info#0",
        "item_name#0 (copy)",
        "rarity#0 (copy)"
      ]
    },
    "932": {
      "op": "concat",
      "defined_out": [
        "owner_info#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "owner_info#0",
        "tmp%3#0"
      ]
    },
    "933": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "owner_info#0"
      ]
    },
    "934": {
      "op": "concat",
      "defined_out": [
        "note_data#0"
      ],
      "stack_out": [
        "note_data#0"
      ]
    },
    "935": {
      "op": "itxn_begin"
    },
    "936": {
      "op": "global MinTxnFee",
      "defined_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "note_data#0"
      ],
      "stack_out": [
        "note_data#0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "938": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "note_data#0"
      ],
      "stack_out": [
        "note_data#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "940": {
      "op": "dupn 3",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetFreeze_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "note_data#0"
      ],
      "stack_out": [
        "note_data#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetFreeze_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0"
      ]
    },
    "942": {
      "op": "uncover 5",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetFreeze_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0",
        "note_data#0"
      ]
    },
    "944": {
      "op": "itxn_field Note",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetFreeze_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0"
      ]
    },
    "946": {
      "op": "itxn_field ConfigAssetClawback",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetFreeze_idx_0#0"
      ]
    },
    "948": {
      "op": "itxn_field ConfigAssetFreeze",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0"
      ]
    },
    "950": {
      "op": "itxn_field ConfigAssetReserve",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "952": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "954": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "0"
      ]
    },
    "955": {
      "op": "itxn_field ConfigAssetDefaultFrozen",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "957": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "0"
      ]
    },
    "958": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "960": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "1"
      ]
    },
    "961": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "963": {
      "op": "pushbytes \"ALGITEM\"",
      "defined_out": [
        "\"ALGITEM\"",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "\"ALGITEM\""
      ]
    },
    "972": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "974": {
      "op": "frame_dig -6",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "item_name#0 (copy)"
      ]
    },
    "976": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "978": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "acfg"
      ]
    },
    "979": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "981": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "983": {
      "op": "itxn_submit"
    },
    "984": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "item_asa.CreatedAssetID#0"
      ],
      "stack_out": [
        "item_asa.CreatedAssetID#0"
      ]
    },
    "986": {
      "op": "intc_0 // 0",
      "stack_out": [
        "item_asa.CreatedAssetID#0",
        "0"
      ]
    },
    "987": {
      "op": "bytec 5 // \"total_items_created\"",
      "defined_out": [
        "\"total_items_created\"",
        "0",
        "item_asa.CreatedAssetID#0"
      ],
      "stack_out": [
        "item_asa.CreatedAssetID#0",
        "0",
        "\"total_items_created\""
      ]
    },
    "989": {
      "op": "app_global_get_ex",
      "defined_out": [
        "item_asa.CreatedAssetID#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "item_asa.CreatedAssetID#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "990": {
      "error": "check self.total_items_created exists",
      "op": "assert // check self.total_items_created exists",
      "stack_out": [
        "item_asa.CreatedAssetID#0",
        "maybe_value%2#0"
      ]
    },
    "991": {
      "op": "intc_1 // 1",
      "stack_out": [
        "item_asa.CreatedAssetID#0",
        "maybe_value%2#0",
        "1"
      ]
    },
    "992": {
      "op": "+",
      "defined_out": [
        "item_asa.CreatedAssetID#0",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "item_asa.CreatedAssetID#0",
        "materialized_values%0#0"
      ]
    },
    "993": {
      "op": "bytec 5 // \"total_items_created\"",
      "stack_out": [
        "item_asa.CreatedAssetID#0",
        "materialized_values%0#0",
        "\"total_items_created\""
      ]
    },
    "995": {
      "op": "swap",
      "stack_out": [
        "item_asa.CreatedAssetID#0",
        "\"total_items_created\"",
        "materialized_values%0#0"
      ]
    },
    "996": {
      "op": "app_global_put",
      "stack_out": [
        "item_asa.CreatedAssetID#0"
      ]
    },
    "997": {
      "op": "pushbytes 0x4974656d2063726561746564",
      "defined_out": [
        "0x4974656d2063726561746564",
        "item_asa.CreatedAssetID#0"
      ],
      "stack_out": [
        "item_asa.CreatedAssetID#0",
        "0x4974656d2063726561746564"
      ]
    },
    "1011": {
      "op": "log",
      "stack_out": [
        "item_asa.CreatedAssetID#0"
      ]
    },
    "1012": {
      "retsub": true,
      "op": "retsub"
    },
    "1013": {
      "subroutine": "smart_contracts.algorealm.contract.AlgoRealmGameManager.recover_lost_item",
      "params": {
        "original_item_id#0": "uint64",
        "recovery_quest_proof#0": "bytes",
        "new_recipient#0": "bytes"
      },
      "block": "recover_lost_item",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "1016": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1018": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1019": {
      "op": "bytec_1 // \"is_registered\"",
      "defined_out": [
        "\"is_registered\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"is_registered\""
      ]
    },
    "1020": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1021": {
      "error": "check self.is_registered exists for account",
      "op": "assert // check self.is_registered exists for account",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1022": {
      "op": "bytec_2 // 0x00",
      "defined_out": [
        "0x00",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x00"
      ]
    },
    "1023": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1024": {
      "error": "Only registered players can recover items",
      "op": "assert // Only registered players can recover items",
      "stack_out": []
    },
    "1025": {
      "op": "frame_dig -3",
      "defined_out": [
        "original_item_id#0 (copy)"
      ],
      "stack_out": [
        "original_item_id#0 (copy)"
      ]
    },
    "1027": {
      "op": "asset_params_get AssetMetadataHash",
      "defined_out": [
        "original_metadata_response.0#0",
        "original_metadata_response.1#0"
      ],
      "stack_out": [
        "original_metadata_response.0#0",
        "original_metadata_response.1#0"
      ]
    },
    "1029": {
      "op": "pop",
      "stack_out": [
        "original_metadata_response.0#0"
      ]
    },
    "1030": {
      "op": "len",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1031": {
      "error": "Original item not found",
      "op": "assert // Original item not found",
      "stack_out": []
    },
    "1032": {
      "op": "frame_dig -2",
      "defined_out": [
        "recovery_quest_proof#0 (copy)"
      ],
      "stack_out": [
        "recovery_quest_proof#0 (copy)"
      ]
    },
    "1034": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "recovery_quest_proof#0 (copy)"
      ],
      "stack_out": [
        "recovery_quest_proof#0 (copy)",
        "0x"
      ]
    },
    "1036": {
      "op": "!=",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1037": {
      "error": "Must provide recovery quest proof",
      "op": "assert // Must provide recovery quest proof",
      "stack_out": []
    },
    "1038": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1040": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "1041": {
      "op": "bytec_3 // \"player_recovery_count\"",
      "defined_out": [
        "\"player_recovery_count\"",
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0",
        "\"player_recovery_count\""
      ]
    },
    "1042": {
      "op": "app_local_get_ex",
      "defined_out": [
        "current_recovery_count#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "current_recovery_count#0",
        "maybe_exists%1#0"
      ]
    },
    "1043": {
      "error": "check self.player_recovery_count exists for account",
      "op": "assert // check self.player_recovery_count exists for account",
      "stack_out": [
        "current_recovery_count#0"
      ]
    },
    "1044": {
      "op": "intc_0 // 0",
      "stack_out": [
        "current_recovery_count#0",
        "0"
      ]
    },
    "1045": {
      "op": "bytec 8 // \"max_recovery_per_item\"",
      "defined_out": [
        "\"max_recovery_per_item\"",
        "0",
        "current_recovery_count#0"
      ],
      "stack_out": [
        "current_recovery_count#0",
        "0",
        "\"max_recovery_per_item\""
      ]
    },
    "1047": {
      "op": "app_global_get_ex",
      "defined_out": [
        "current_recovery_count#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "current_recovery_count#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1048": {
      "error": "check self.max_recovery_per_item exists",
      "op": "assert // check self.max_recovery_per_item exists",
      "stack_out": [
        "current_recovery_count#0",
        "maybe_value%2#0"
      ]
    },
    "1049": {
      "op": "dig 1",
      "defined_out": [
        "current_recovery_count#0",
        "current_recovery_count#0 (copy)",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "current_recovery_count#0",
        "maybe_value%2#0",
        "current_recovery_count#0 (copy)"
      ]
    },
    "1051": {
      "op": ">",
      "defined_out": [
        "current_recovery_count#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "current_recovery_count#0",
        "tmp%6#0"
      ]
    },
    "1052": {
      "error": "Recovery limit reached - max 3 recoveries per player",
      "op": "assert // Recovery limit reached - max 3 recoveries per player",
      "stack_out": [
        "current_recovery_count#0"
      ]
    },
    "1053": {
      "op": "frame_dig -3",
      "stack_out": [
        "current_recovery_count#0",
        "original_item_id#0 (copy)"
      ]
    },
    "1055": {
      "op": "asset_params_get AssetName",
      "defined_out": [
        "current_recovery_count#0",
        "original_name_response.0#0",
        "original_name_response.1#0"
      ],
      "stack_out": [
        "current_recovery_count#0",
        "original_name_response.0#0",
        "original_name_response.1#0"
      ]
    },
    "1057": {
      "op": "pop",
      "stack_out": [
        "current_recovery_count#0",
        "original_name_response.0#0"
      ]
    },
    "1058": {
      "op": "len",
      "defined_out": [
        "current_recovery_count#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "current_recovery_count#0",
        "tmp%7#0"
      ]
    },
    "1059": {
      "error": "Cannot get original item name",
      "op": "assert // Cannot get original item name",
      "stack_out": [
        "current_recovery_count#0"
      ]
    },
    "1060": {
      "op": "bytec 7 // 0x4f574e45523a",
      "defined_out": [
        "0x4f574e45523a",
        "current_recovery_count#0"
      ],
      "stack_out": [
        "current_recovery_count#0",
        "0x4f574e45523a"
      ]
    },
    "1062": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x4f574e45523a",
        "current_recovery_count#0",
        "new_recipient#0 (copy)"
      ],
      "stack_out": [
        "current_recovery_count#0",
        "0x4f574e45523a",
        "new_recipient#0 (copy)"
      ]
    },
    "1064": {
      "op": "concat",
      "defined_out": [
        "current_recovery_count#0",
        "owner_info#0"
      ],
      "stack_out": [
        "current_recovery_count#0",
        "owner_info#0"
      ]
    },
    "1065": {
      "op": "pushbytes 0x5245434f56455245445f4954454d5f",
      "defined_out": [
        "0x5245434f56455245445f4954454d5f",
        "current_recovery_count#0",
        "owner_info#0"
      ],
      "stack_out": [
        "current_recovery_count#0",
        "owner_info#0",
        "0x5245434f56455245445f4954454d5f"
      ]
    },
    "1082": {
      "op": "frame_dig -2",
      "stack_out": [
        "current_recovery_count#0",
        "owner_info#0",
        "0x5245434f56455245445f4954454d5f",
        "recovery_quest_proof#0 (copy)"
      ]
    },
    "1084": {
      "op": "concat",
      "defined_out": [
        "current_recovery_count#0",
        "owner_info#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "current_recovery_count#0",
        "owner_info#0",
        "tmp%9#0"
      ]
    },
    "1085": {
      "op": "swap",
      "stack_out": [
        "current_recovery_count#0",
        "tmp%9#0",
        "owner_info#0"
      ]
    },
    "1086": {
      "op": "concat",
      "defined_out": [
        "current_recovery_count#0",
        "recovery_note#0"
      ],
      "stack_out": [
        "current_recovery_count#0",
        "recovery_note#0"
      ]
    },
    "1087": {
      "op": "itxn_begin"
    },
    "1088": {
      "op": "global MinTxnFee",
      "defined_out": [
        "current_recovery_count#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "recovery_note#0"
      ],
      "stack_out": [
        "current_recovery_count#0",
        "recovery_note#0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "1090": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "current_recovery_count#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "recovery_note#0"
      ],
      "stack_out": [
        "current_recovery_count#0",
        "recovery_note#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "1092": {
      "op": "dupn 3",
      "defined_out": [
        "current_recovery_count#0",
        "inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetFreeze_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "recovery_note#0"
      ],
      "stack_out": [
        "current_recovery_count#0",
        "recovery_note#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetFreeze_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0"
      ]
    },
    "1094": {
      "op": "uncover 5",
      "stack_out": [
        "current_recovery_count#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetFreeze_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0",
        "recovery_note#0"
      ]
    },
    "1096": {
      "op": "itxn_field Note",
      "stack_out": [
        "current_recovery_count#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetFreeze_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0"
      ]
    },
    "1098": {
      "op": "itxn_field ConfigAssetClawback",
      "stack_out": [
        "current_recovery_count#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetFreeze_idx_0#0"
      ]
    },
    "1100": {
      "op": "itxn_field ConfigAssetFreeze",
      "stack_out": [
        "current_recovery_count#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0"
      ]
    },
    "1102": {
      "op": "itxn_field ConfigAssetReserve",
      "stack_out": [
        "current_recovery_count#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "1104": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": [
        "current_recovery_count#0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "1106": {
      "op": "intc_0 // 0",
      "stack_out": [
        "current_recovery_count#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "0"
      ]
    },
    "1107": {
      "op": "itxn_field ConfigAssetDefaultFrozen",
      "stack_out": [
        "current_recovery_count#0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "1109": {
      "op": "intc_0 // 0",
      "stack_out": [
        "current_recovery_count#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "0"
      ]
    },
    "1110": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": [
        "current_recovery_count#0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "1112": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "current_recovery_count#0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "current_recovery_count#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "1"
      ]
    },
    "1113": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "current_recovery_count#0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "1115": {
      "op": "pushbytes \"ALGRECOV\"",
      "defined_out": [
        "\"ALGRECOV\"",
        "current_recovery_count#0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "current_recovery_count#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "\"ALGRECOV\""
      ]
    },
    "1125": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "current_recovery_count#0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "1127": {
      "op": "pushbytes \"Recovered Item\"",
      "defined_out": [
        "\"Recovered Item\"",
        "current_recovery_count#0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "current_recovery_count#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "\"Recovered Item\""
      ]
    },
    "1143": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "current_recovery_count#0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "1145": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg",
        "current_recovery_count#0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "current_recovery_count#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "acfg"
      ]
    },
    "1146": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "current_recovery_count#0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "1148": {
      "op": "itxn_field Fee",
      "stack_out": [
        "current_recovery_count#0"
      ]
    },
    "1150": {
      "op": "itxn_submit"
    },
    "1151": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "current_recovery_count#0",
        "recovered_item_asa.CreatedAssetID#0"
      ],
      "stack_out": [
        "current_recovery_count#0",
        "recovered_item_asa.CreatedAssetID#0"
      ]
    },
    "1153": {
      "op": "swap",
      "stack_out": [
        "recovered_item_asa.CreatedAssetID#0",
        "current_recovery_count#0"
      ]
    },
    "1154": {
      "op": "intc_1 // 1",
      "stack_out": [
        "recovered_item_asa.CreatedAssetID#0",
        "current_recovery_count#0",
        "1"
      ]
    },
    "1155": {
      "op": "+",
      "defined_out": [
        "materialized_values%0#0",
        "recovered_item_asa.CreatedAssetID#0"
      ],
      "stack_out": [
        "recovered_item_asa.CreatedAssetID#0",
        "materialized_values%0#0"
      ]
    },
    "1156": {
      "op": "txn Sender",
      "defined_out": [
        "materialized_values%0#0",
        "recovered_item_asa.CreatedAssetID#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "recovered_item_asa.CreatedAssetID#0",
        "materialized_values%0#0",
        "tmp%10#0"
      ]
    },
    "1158": {
      "op": "bytec_3 // \"player_recovery_count\"",
      "stack_out": [
        "recovered_item_asa.CreatedAssetID#0",
        "materialized_values%0#0",
        "tmp%10#0",
        "\"player_recovery_count\""
      ]
    },
    "1159": {
      "op": "uncover 2",
      "stack_out": [
        "recovered_item_asa.CreatedAssetID#0",
        "tmp%10#0",
        "\"player_recovery_count\"",
        "materialized_values%0#0"
      ]
    },
    "1161": {
      "op": "app_local_put",
      "stack_out": [
        "recovered_item_asa.CreatedAssetID#0"
      ]
    },
    "1162": {
      "op": "pushbytes 0x4974656d207265636f7665726564",
      "defined_out": [
        "0x4974656d207265636f7665726564",
        "recovered_item_asa.CreatedAssetID#0"
      ],
      "stack_out": [
        "recovered_item_asa.CreatedAssetID#0",
        "0x4974656d207265636f7665726564"
      ]
    },
    "1178": {
      "op": "log",
      "stack_out": [
        "recovered_item_asa.CreatedAssetID#0"
      ]
    },
    "1179": {
      "retsub": true,
      "op": "retsub"
    },
    "1180": {
      "subroutine": "smart_contracts.algorealm.contract.AlgoRealmGameManager.seasonal_event_reissue",
      "params": {
        "event_name#0": "bytes",
        "participation_proof#0": "bytes",
        "recipient#0": "bytes"
      },
      "block": "seasonal_event_reissue",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "1183": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1185": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1186": {
      "op": "bytec_1 // \"is_registered\"",
      "defined_out": [
        "\"is_registered\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"is_registered\""
      ]
    },
    "1187": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1188": {
      "error": "check self.is_registered exists for account",
      "op": "assert // check self.is_registered exists for account",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1189": {
      "op": "bytec_2 // 0x00",
      "defined_out": [
        "0x00",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x00"
      ]
    },
    "1190": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1191": {
      "error": "Only registered players can participate",
      "op": "assert // Only registered players can participate",
      "stack_out": []
    },
    "1192": {
      "op": "frame_dig -2",
      "defined_out": [
        "participation_proof#0 (copy)"
      ],
      "stack_out": [
        "participation_proof#0 (copy)"
      ]
    },
    "1194": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "participation_proof#0 (copy)"
      ],
      "stack_out": [
        "participation_proof#0 (copy)",
        "0x"
      ]
    },
    "1196": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1197": {
      "error": "Must provide participation proof",
      "op": "assert // Must provide participation proof",
      "stack_out": []
    },
    "1198": {
      "op": "bytec 7 // 0x4f574e45523a",
      "defined_out": [
        "0x4f574e45523a"
      ],
      "stack_out": [
        "0x4f574e45523a"
      ]
    },
    "1200": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x4f574e45523a",
        "recipient#0 (copy)"
      ],
      "stack_out": [
        "0x4f574e45523a",
        "recipient#0 (copy)"
      ]
    },
    "1202": {
      "op": "concat",
      "defined_out": [
        "owner_info#0"
      ],
      "stack_out": [
        "owner_info#0"
      ]
    },
    "1203": {
      "op": "pushbytes 0x534541534f4e414c5f",
      "defined_out": [
        "0x534541534f4e414c5f",
        "owner_info#0"
      ],
      "stack_out": [
        "owner_info#0",
        "0x534541534f4e414c5f"
      ]
    },
    "1214": {
      "op": "frame_dig -2",
      "stack_out": [
        "owner_info#0",
        "0x534541534f4e414c5f",
        "participation_proof#0 (copy)"
      ]
    },
    "1216": {
      "op": "concat",
      "defined_out": [
        "owner_info#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "owner_info#0",
        "tmp%3#0"
      ]
    },
    "1217": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "owner_info#0"
      ]
    },
    "1218": {
      "op": "concat",
      "defined_out": [
        "seasonal_note#0"
      ],
      "stack_out": [
        "seasonal_note#0"
      ]
    },
    "1219": {
      "op": "itxn_begin"
    },
    "1220": {
      "op": "global MinTxnFee",
      "defined_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "seasonal_note#0"
      ],
      "stack_out": [
        "seasonal_note#0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "1222": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "seasonal_note#0"
      ],
      "stack_out": [
        "seasonal_note#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "1224": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "seasonal_note#0"
      ],
      "stack_out": [
        "seasonal_note#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0"
      ]
    },
    "1225": {
      "op": "uncover 3",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0",
        "seasonal_note#0"
      ]
    },
    "1227": {
      "op": "itxn_field Note",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0"
      ]
    },
    "1229": {
      "op": "itxn_field ConfigAssetReserve",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "1231": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "1233": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "0"
      ]
    },
    "1234": {
      "op": "itxn_field ConfigAssetDefaultFrozen",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "1236": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "0"
      ]
    },
    "1237": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "1239": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "1"
      ]
    },
    "1240": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "1242": {
      "op": "pushbytes \"ALGSEASN\"",
      "defined_out": [
        "\"ALGSEASN\"",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "\"ALGSEASN\""
      ]
    },
    "1252": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "1254": {
      "op": "pushbytes \"SEASONAL_ITEM\"",
      "defined_out": [
        "\"SEASONAL_ITEM\"",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "\"SEASONAL_ITEM\""
      ]
    },
    "1269": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "1271": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "acfg"
      ]
    },
    "1272": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "1274": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1276": {
      "op": "itxn_submit"
    },
    "1277": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "seasonal_asa.CreatedAssetID#0"
      ],
      "stack_out": [
        "seasonal_asa.CreatedAssetID#0"
      ]
    },
    "1279": {
      "op": "pushbytes 0x536561736f6e616c206974656d20697373756564",
      "defined_out": [
        "0x536561736f6e616c206974656d20697373756564",
        "seasonal_asa.CreatedAssetID#0"
      ],
      "stack_out": [
        "seasonal_asa.CreatedAssetID#0",
        "0x536561736f6e616c206974656d20697373756564"
      ]
    },
    "1301": {
      "op": "log",
      "stack_out": [
        "seasonal_asa.CreatedAssetID#0"
      ]
    },
    "1302": {
      "retsub": true,
      "op": "retsub"
    },
    "1303": {
      "subroutine": "smart_contracts.algorealm.contract.AlgoRealmGameManager.craft_items",
      "params": {
        "material_1#0": "uint64",
        "material_2#0": "uint64",
        "recipe_id#0": "uint64"
      },
      "block": "craft_items",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "1306": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1308": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1309": {
      "op": "bytec_1 // \"is_registered\"",
      "defined_out": [
        "\"is_registered\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"is_registered\""
      ]
    },
    "1310": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1311": {
      "error": "check self.is_registered exists for account",
      "op": "assert // check self.is_registered exists for account",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1312": {
      "op": "bytec_2 // 0x00",
      "defined_out": [
        "0x00",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x00"
      ]
    },
    "1313": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1314": {
      "error": "Only registered players can craft",
      "op": "assert // Only registered players can craft",
      "stack_out": []
    },
    "1315": {
      "op": "bytec 7 // 0x4f574e45523a",
      "defined_out": [
        "0x4f574e45523a"
      ],
      "stack_out": [
        "0x4f574e45523a"
      ]
    },
    "1317": {
      "op": "txn Sender",
      "defined_out": [
        "0x4f574e45523a",
        "tmp%2#0"
      ],
      "stack_out": [
        "0x4f574e45523a",
        "tmp%2#0"
      ]
    },
    "1319": {
      "op": "concat",
      "defined_out": [
        "owner_info#0"
      ],
      "stack_out": [
        "owner_info#0"
      ]
    },
    "1320": {
      "op": "bytec 12 // 0x435241465445445f4954454d",
      "defined_out": [
        "0x435241465445445f4954454d",
        "owner_info#0"
      ],
      "stack_out": [
        "owner_info#0",
        "0x435241465445445f4954454d"
      ]
    },
    "1322": {
      "op": "swap",
      "stack_out": [
        "0x435241465445445f4954454d",
        "owner_info#0"
      ]
    },
    "1323": {
      "op": "concat",
      "defined_out": [
        "crafted_note#0"
      ],
      "stack_out": [
        "crafted_note#0"
      ]
    },
    "1324": {
      "op": "itxn_begin"
    },
    "1325": {
      "op": "global MinTxnFee",
      "defined_out": [
        "crafted_note#0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "crafted_note#0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "1327": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "crafted_note#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "crafted_note#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "1329": {
      "op": "uncover 2",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "crafted_note#0"
      ]
    },
    "1331": {
      "op": "itxn_field Note",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "1333": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "1335": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "0"
      ]
    },
    "1336": {
      "op": "itxn_field ConfigAssetDefaultFrozen",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "1338": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "0"
      ]
    },
    "1339": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "1341": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "1"
      ]
    },
    "1342": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "1344": {
      "op": "pushbytes \"ALGCRAFT\"",
      "defined_out": [
        "\"ALGCRAFT\"",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "\"ALGCRAFT\""
      ]
    },
    "1354": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "1356": {
      "op": "bytec 12 // \"CRAFTED_ITEM\"",
      "defined_out": [
        "\"CRAFTED_ITEM\"",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "\"CRAFTED_ITEM\""
      ]
    },
    "1358": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "1360": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "acfg"
      ]
    },
    "1361": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "1363": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1365": {
      "op": "itxn_submit"
    },
    "1366": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "crafted_asa.CreatedAssetID#0"
      ],
      "stack_out": [
        "crafted_asa.CreatedAssetID#0"
      ]
    },
    "1368": {
      "op": "pushbytes 0x4974656d2063726166746564",
      "defined_out": [
        "0x4974656d2063726166746564",
        "crafted_asa.CreatedAssetID#0"
      ],
      "stack_out": [
        "crafted_asa.CreatedAssetID#0",
        "0x4974656d2063726166746564"
      ]
    },
    "1382": {
      "op": "log",
      "stack_out": [
        "crafted_asa.CreatedAssetID#0"
      ]
    },
    "1383": {
      "retsub": true,
      "op": "retsub"
    },
    "1384": {
      "subroutine": "smart_contracts.algorealm.contract.AlgoRealmGameManager.get_player_stats",
      "params": {
        "player#0": "bytes"
      },
      "block": "get_player_stats",
      "stack_in": [],
      "op": "proto 1 3"
    },
    "1387": {
      "op": "frame_dig -1",
      "defined_out": [
        "player#0 (copy)"
      ],
      "stack_out": [
        "player#0 (copy)"
      ]
    },
    "1389": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "player#0 (copy)"
      ],
      "stack_out": [
        "player#0 (copy)",
        "0"
      ]
    },
    "1390": {
      "op": "bytec_1 // \"is_registered\"",
      "defined_out": [
        "\"is_registered\"",
        "0",
        "player#0 (copy)"
      ],
      "stack_out": [
        "player#0 (copy)",
        "0",
        "\"is_registered\""
      ]
    },
    "1391": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1392": {
      "error": "check self.is_registered exists for account",
      "op": "assert // check self.is_registered exists for account",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1393": {
      "op": "bytec_2 // 0x00",
      "defined_out": [
        "0x00",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x00"
      ]
    },
    "1394": {
      "op": "!=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1395": {
      "error": "Player not registered",
      "op": "assert // Player not registered",
      "stack_out": []
    },
    "1396": {
      "op": "frame_dig -1",
      "stack_out": [
        "player#0 (copy)"
      ]
    },
    "1398": {
      "op": "intc_0 // 0",
      "stack_out": [
        "player#0 (copy)",
        "0"
      ]
    },
    "1399": {
      "op": "bytec 10 // \"player_level\"",
      "defined_out": [
        "\"player_level\"",
        "0",
        "player#0 (copy)"
      ],
      "stack_out": [
        "player#0 (copy)",
        "0",
        "\"player_level\""
      ]
    },
    "1401": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1402": {
      "error": "check self.player_level exists for account",
      "op": "assert // check self.player_level exists for account",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1403": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%1#0",
        "player#0 (copy)"
      ]
    },
    "1405": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "player#0 (copy)",
        "0"
      ]
    },
    "1406": {
      "op": "bytec 11 // \"player_experience\"",
      "defined_out": [
        "\"player_experience\"",
        "0",
        "maybe_value%1#0",
        "player#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "player#0 (copy)",
        "0",
        "\"player_experience\""
      ]
    },
    "1408": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1409": {
      "error": "check self.player_experience exists for account",
      "op": "assert // check self.player_experience exists for account",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "1410": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "player#0 (copy)"
      ]
    },
    "1412": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "player#0 (copy)",
        "0"
      ]
    },
    "1413": {
      "op": "bytec_3 // \"player_recovery_count\"",
      "defined_out": [
        "\"player_recovery_count\"",
        "0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "player#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "player#0 (copy)",
        "0",
        "\"player_recovery_count\""
      ]
    },
    "1414": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1415": {
      "error": "check self.player_recovery_count exists for account",
      "op": "assert // check self.player_recovery_count exists for account",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "1416": {
      "retsub": true,
      "op": "retsub"
    },
    "1417": {
      "subroutine": "smart_contracts.algorealm.contract.AlgoRealmGameManager.advance_season",
      "params": {},
      "block": "advance_season",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1419": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1420": {
      "op": "bytec 9 // \"game_master\"",
      "defined_out": [
        "\"game_master\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"game_master\""
      ]
    },
    "1422": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1423": {
      "error": "check self.game_master exists",
      "op": "assert // check self.game_master exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1424": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1425": {
      "error": "Only game master can advance season",
      "op": "assert // Only game master can advance season",
      "stack_out": []
    },
    "1426": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1427": {
      "op": "bytec 6 // \"current_season\"",
      "defined_out": [
        "\"current_season\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"current_season\""
      ]
    },
    "1429": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1430": {
      "error": "check self.current_season exists",
      "op": "assert // check self.current_season exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1431": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "1"
      ]
    },
    "1432": {
      "op": "+",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "1433": {
      "op": "bytec 6 // \"current_season\"",
      "stack_out": [
        "materialized_values%0#0",
        "\"current_season\""
      ]
    },
    "1435": {
      "op": "dig 1",
      "defined_out": [
        "\"current_season\"",
        "materialized_values%0#0",
        "materialized_values%0#0 (copy)"
      ],
      "stack_out": [
        "materialized_values%0#0",
        "\"current_season\"",
        "materialized_values%0#0 (copy)"
      ]
    },
    "1437": {
      "op": "app_global_put",
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "1438": {
      "op": "pushbytes 0x536561736f6e20616476616e636564",
      "defined_out": [
        "0x536561736f6e20616476616e636564",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0",
        "0x536561736f6e20616476616e636564"
      ]
    },
    "1455": {
      "op": "log",
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "1456": {
      "retsub": true,
      "op": "retsub"
    },
    "1457": {
      "subroutine": "smart_contracts.algorealm.contract.AlgoRealmGameManager.get_game_info",
      "params": {},
      "block": "get_game_info",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1458": {
      "op": "bytec 4 // \"total_players\"",
      "defined_out": [
        "\"total_players\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_players\""
      ]
    },
    "1460": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1461": {
      "error": "check self.total_players exists",
      "op": "assert // check self.total_players exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1462": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "1463": {
      "op": "bytec 5 // \"total_items_created\"",
      "defined_out": [
        "\"total_items_created\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"total_items_created\""
      ]
    },
    "1465": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1466": {
      "error": "check self.total_items_created exists",
      "op": "assert // check self.total_items_created exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "1467": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "1468": {
      "op": "bytec 6 // \"current_season\"",
      "defined_out": [
        "\"current_season\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0",
        "\"current_season\""
      ]
    },
    "1470": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1471": {
      "error": "check self.current_season exists",
      "op": "assert // check self.current_season exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "1472": {
      "retsub": true,
      "op": "retsub"
    },
    "1473": {
      "subroutine": "smart_contracts.algorealm.contract.AlgoRealmGameManager.claim_item",
      "params": {
        "item_id#0": "uint64"
      },
      "block": "claim_item",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1476": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1478": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1479": {
      "op": "bytec_1 // \"is_registered\"",
      "defined_out": [
        "\"is_registered\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"is_registered\""
      ]
    },
    "1480": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1481": {
      "error": "check self.is_registered exists for account",
      "op": "assert // check self.is_registered exists for account",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1482": {
      "op": "bytec_2 // 0x00",
      "defined_out": [
        "0x00",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x00"
      ]
    },
    "1483": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1484": {
      "error": "Only registered players can claim items",
      "op": "assert // Only registered players can claim items",
      "stack_out": []
    },
    "1485": {
      "op": "frame_dig -1",
      "defined_out": [
        "item_id#0 (copy)"
      ],
      "stack_out": [
        "item_id#0 (copy)"
      ]
    },
    "1487": {
      "op": "asset_params_get AssetManager",
      "defined_out": [
        "manager_response.0#0",
        "manager_response.1#0"
      ],
      "stack_out": [
        "manager_response.0#0",
        "manager_response.1#0"
      ]
    },
    "1489": {
      "op": "pop",
      "stack_out": [
        "manager_response.0#0"
      ]
    },
    "1490": {
      "op": "global ZeroAddress",
      "defined_out": [
        "manager_response.0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "manager_response.0#0",
        "tmp%2#0"
      ]
    },
    "1492": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1493": {
      "error": "Asset not found",
      "op": "assert // Asset not found",
      "stack_out": []
    },
    "1494": {
      "op": "itxn_begin"
    },
    "1495": {
      "op": "global MinTxnFee",
      "defined_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "1497": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1499": {
      "op": "frame_dig -1",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "item_id#0 (copy)"
      ]
    },
    "1501": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1503": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "1"
      ]
    },
    "1504": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1506": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "1508": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "axfer"
      ]
    },
    "1510": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "1512": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1514": {
      "op": "itxn_submit"
    },
    "1515": {
      "op": "pushbytes 0x4974656d20636c61696d6564",
      "defined_out": [
        "0x4974656d20636c61696d6564"
      ],
      "stack_out": [
        "0x4974656d20636c61696d6564"
      ]
    },
    "1529": {
      "op": "log",
      "stack_out": []
    },
    "1530": {
      "op": "pushbytes \"Item successfully claimed!\"",
      "defined_out": [
        "\"Item successfully claimed!\""
      ],
      "stack_out": [
        "\"Item successfully claimed!\""
      ]
    },
    "1558": {
      "retsub": true,
      "op": "retsub"
    },
    "1559": {
      "subroutine": "smart_contracts.algorealm.contract.AlgoRealmGameManager.get_recovery_status",
      "params": {
        "player#0": "bytes"
      },
      "block": "get_recovery_status",
      "stack_in": [],
      "op": "proto 1 2"
    },
    "1562": {
      "op": "frame_dig -1",
      "defined_out": [
        "player#0 (copy)"
      ],
      "stack_out": [
        "player#0 (copy)"
      ]
    },
    "1564": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "player#0 (copy)"
      ],
      "stack_out": [
        "player#0 (copy)",
        "0"
      ]
    },
    "1565": {
      "op": "bytec_1 // \"is_registered\"",
      "defined_out": [
        "\"is_registered\"",
        "0",
        "player#0 (copy)"
      ],
      "stack_out": [
        "player#0 (copy)",
        "0",
        "\"is_registered\""
      ]
    },
    "1566": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1567": {
      "error": "check self.is_registered exists for account",
      "op": "assert // check self.is_registered exists for account",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1568": {
      "op": "bytec_2 // 0x00",
      "defined_out": [
        "0x00",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x00"
      ]
    },
    "1569": {
      "op": "!=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1570": {
      "error": "Player not registered",
      "op": "assert // Player not registered",
      "stack_out": []
    },
    "1571": {
      "op": "frame_dig -1",
      "stack_out": [
        "player#0 (copy)"
      ]
    },
    "1573": {
      "op": "intc_0 // 0",
      "stack_out": [
        "player#0 (copy)",
        "0"
      ]
    },
    "1574": {
      "op": "bytec_3 // \"player_recovery_count\"",
      "defined_out": [
        "\"player_recovery_count\"",
        "0",
        "player#0 (copy)"
      ],
      "stack_out": [
        "player#0 (copy)",
        "0",
        "\"player_recovery_count\""
      ]
    },
    "1575": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1576": {
      "error": "check self.player_recovery_count exists for account",
      "op": "assert // check self.player_recovery_count exists for account",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1577": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "0"
      ]
    },
    "1578": {
      "op": "bytec 8 // \"max_recovery_per_item\"",
      "defined_out": [
        "\"max_recovery_per_item\"",
        "0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "0",
        "\"max_recovery_per_item\""
      ]
    },
    "1580": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1581": {
      "error": "check self.max_recovery_per_item exists",
      "op": "assert // check self.max_recovery_per_item exists",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "1582": {
      "retsub": true,
      "op": "retsub"
    },
    "1583": {
      "subroutine": "smart_contracts.algorealm.contract.AlgoRealmGameManager.get_item_ownership_info",
      "params": {
        "item_id#0": "uint64"
      },
      "block": "get_item_ownership_info",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1586": {
      "op": "frame_dig -1",
      "defined_out": [
        "item_id#0 (copy)"
      ],
      "stack_out": [
        "item_id#0 (copy)"
      ]
    },
    "1588": {
      "op": "asset_params_get AssetName",
      "defined_out": [
        "name_response.0#0",
        "name_response.1#0"
      ],
      "stack_out": [
        "name_response.0#0",
        "name_response.1#0"
      ]
    },
    "1590": {
      "op": "pop",
      "stack_out": [
        "name_response.0#0"
      ]
    },
    "1591": {
      "op": "len",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1592": {
      "op": "bz get_item_ownership_info_else_body@2",
      "stack_out": []
    },
    "1595": {
      "op": "pushbytes \"Item exists and ownership info is stored in the ASA note field\"",
      "defined_out": [
        "\"Item exists and ownership info is stored in the ASA note field\""
      ],
      "stack_out": [
        "\"Item exists and ownership info is stored in the ASA note field\""
      ]
    },
    "1659": {
      "retsub": true,
      "op": "retsub"
    },
    "1660": {
      "block": "get_item_ownership_info_else_body@2",
      "stack_in": [],
      "op": "pushbytes \"Item not found\"",
      "defined_out": [
        "\"Item not found\""
      ],
      "stack_out": [
        "\"Item not found\""
      ]
    },
    "1676": {
      "retsub": true,
      "op": "retsub"
    },
    "1677": {
      "subroutine": "smart_contracts.algorealm.contract.AlgoRealmGameManager.check_item_exists",
      "params": {
        "item_id#0": "uint64"
      },
      "block": "check_item_exists",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1680": {
      "op": "frame_dig -1",
      "defined_out": [
        "item_id#0 (copy)"
      ],
      "stack_out": [
        "item_id#0 (copy)"
      ]
    },
    "1682": {
      "op": "asset_params_get AssetName",
      "defined_out": [
        "exists_response.0#0",
        "exists_response.1#0"
      ],
      "stack_out": [
        "exists_response.0#0",
        "exists_response.1#0"
      ]
    },
    "1684": {
      "op": "pop",
      "stack_out": [
        "exists_response.0#0"
      ]
    },
    "1685": {
      "op": "len",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1686": {
      "op": "bz check_item_exists_else_body@2",
      "stack_out": []
    },
    "1689": {
      "op": "pushbytes 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "0x80"
      ]
    },
    "1692": {
      "retsub": true,
      "op": "retsub"
    },
    "1693": {
      "block": "check_item_exists_else_body@2",
      "stack_in": [],
      "op": "bytec_2 // 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "0x00"
      ]
    },
    "1694": {
      "retsub": true,
      "op": "retsub"
    }
  }
}