{
    "name": "AlgoRealmGameManager",
    "structs": {},
    "methods": [
        {
            "name": "initialize_game",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "desc": "Initialize the game state - called once when contract is created",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "register_player",
            "args": [
                {
                    "type": "string",
                    "name": "player_name"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp",
                    "OptIn"
                ]
            },
            "readonly": false,
            "desc": "Register a new player in the game",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_game_item",
            "args": [
                {
                    "type": "account",
                    "name": "recipient"
                },
                {
                    "type": "string",
                    "name": "item_name"
                },
                {
                    "type": "string",
                    "name": "item_type"
                },
                {
                    "type": "string",
                    "name": "rarity"
                },
                {
                    "type": "uint64",
                    "name": "attack_power"
                },
                {
                    "type": "uint64",
                    "name": "defense_power"
                },
                {
                    "type": "string",
                    "name": "special_effect"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Create a new game item as an ASA",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "recover_lost_item",
            "args": [
                {
                    "type": "asset",
                    "name": "original_item_id"
                },
                {
                    "type": "byte[]",
                    "name": "recovery_quest_proof"
                },
                {
                    "type": "account",
                    "name": "new_recipient"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "ON-DEMAND TOKENIZATION: Recover a lost game item\nThis is the core feature for Task 6",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "seasonal_event_reissue",
            "args": [
                {
                    "type": "string",
                    "name": "event_name"
                },
                {
                    "type": "byte[]",
                    "name": "participation_proof"
                },
                {
                    "type": "account",
                    "name": "recipient"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "ON-DEMAND TOKENIZATION: Reissue seasonal event items\nAllows players to earn previous season items in new events",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "craft_items",
            "args": [
                {
                    "type": "asset",
                    "name": "material_1"
                },
                {
                    "type": "asset",
                    "name": "material_2"
                },
                {
                    "type": "uint64",
                    "name": "recipe_id"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Craft new items by combining existing ones\nDemonstrates atomic transactions",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_player_stats",
            "args": [
                {
                    "type": "account",
                    "name": "player"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get player statistics",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "advance_season",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Advance to next season (only game master)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_game_info",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get current game information",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "claim_item",
            "args": [
                {
                    "type": "asset",
                    "name": "item_id"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Claim an item that was created for the player.\nPlayer must have opted-in to the asset before calling this.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_recovery_status",
            "args": [
                {
                    "type": "account",
                    "name": "player"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get player's current recovery count and max allowed recoveries",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "\n    Main game manager contract for AlgoRealm\n    Handles player registration, item management, and on-demand tokenization\n    ",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 4,
                "bytes": 1
            },
            "local": {
                "ints": 3,
                "bytes": 1
            }
        },
        "keys": {
            "global": {
                "total_players": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfcGxheWVycw=="
                },
                "total_items_created": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfaXRlbXNfY3JlYXRlZA=="
                },
                "game_master": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "Z2FtZV9tYXN0ZXI="
                },
                "current_season": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y3VycmVudF9zZWFzb24="
                },
                "max_recovery_per_item": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bWF4X3JlY292ZXJ5X3Blcl9pdGVt"
                }
            },
            "local": {
                "player_level": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cGxheWVyX2xldmVs"
                },
                "player_experience": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cGxheWVyX2V4cGVyaWVuY2U="
                },
                "player_recovery_count": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cGxheWVyX3JlY292ZXJ5X2NvdW50"
                },
                "is_registered": {
                    "keyType": "AVMString",
                    "valueType": "bool",
                    "key": "aXNfcmVnaXN0ZXJlZA=="
                }
            },
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1388
                    ],
                    "errorMessage": "Asset not found"
                },
                {
                    "pc": [
                        977
                    ],
                    "errorMessage": "Cannot get original item name"
                },
                {
                    "pc": [
                        1108
                    ],
                    "errorMessage": "Must provide participation proof"
                },
                {
                    "pc": [
                        955
                    ],
                    "errorMessage": "Must provide recovery quest proof"
                },
                {
                    "pc": [
                        272,
                        299,
                        329,
                        359,
                        376,
                        412,
                        445,
                        480,
                        515,
                        603
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        573
                    ],
                    "errorMessage": "OnCompletion is not one of NoOp, OptIn"
                },
                {
                    "pc": [
                        1320
                    ],
                    "errorMessage": "Only game master can advance season"
                },
                {
                    "pc": [
                        840
                    ],
                    "errorMessage": "Only game master can create items"
                },
                {
                    "pc": [
                        1379
                    ],
                    "errorMessage": "Only registered players can claim items"
                },
                {
                    "pc": [
                        1218
                    ],
                    "errorMessage": "Only registered players can craft"
                },
                {
                    "pc": [
                        1102
                    ],
                    "errorMessage": "Only registered players can participate"
                },
                {
                    "pc": [
                        942
                    ],
                    "errorMessage": "Only registered players can recover items"
                },
                {
                    "pc": [
                        949
                    ],
                    "errorMessage": "Original item not found"
                },
                {
                    "pc": [
                        1290,
                        1465
                    ],
                    "errorMessage": "Player not registered"
                },
                {
                    "pc": [
                        849
                    ],
                    "errorMessage": "Recipient must be registered player"
                },
                {
                    "pc": [
                        970
                    ],
                    "errorMessage": "Recovery limit reached - max 3 recoveries per player"
                },
                {
                    "pc": [
                        607
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        275,
                        302,
                        332,
                        362,
                        379,
                        415,
                        448,
                        483,
                        518,
                        576
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1325,
                        1366
                    ],
                    "errorMessage": "check self.current_season exists"
                },
                {
                    "pc": [
                        838,
                        1318
                    ],
                    "errorMessage": "check self.game_master exists"
                },
                {
                    "pc": [
                        733,
                        846,
                        939,
                        1099,
                        1215,
                        1287,
                        1376,
                        1462
                    ],
                    "errorMessage": "check self.is_registered exists for account"
                },
                {
                    "pc": [
                        966,
                        1476
                    ],
                    "errorMessage": "check self.max_recovery_per_item exists"
                },
                {
                    "pc": [
                        1304
                    ],
                    "errorMessage": "check self.player_experience exists for account"
                },
                {
                    "pc": [
                        1297
                    ],
                    "errorMessage": "check self.player_level exists for account"
                },
                {
                    "pc": [
                        961,
                        1310,
                        1471
                    ],
                    "errorMessage": "check self.player_recovery_count exists for account"
                },
                {
                    "pc": [
                        908,
                        1361
                    ],
                    "errorMessage": "check self.total_items_created exists"
                },
                {
                    "pc": [
                        795,
                        1356
                    ],
                    "errorMessage": "check self.total_players exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiADAAEDJgwEFR98dQ1pc19yZWdpc3RlcmVkAQAVcGxheWVyX3JlY292ZXJ5X2NvdW50DXRvdGFsX3BsYXllcnMTdG90YWxfaXRlbXNfY3JlYXRlZA5jdXJyZW50X3NlYXNvbhVtYXhfcmVjb3ZlcnlfcGVyX2l0ZW0LZ2FtZV9tYXN0ZXIMcGxheWVyX2xldmVsEXBsYXllcl9leHBlcmllbmNlDENSQUZURURfSVRFTTEbQQBUggsEs1qsOwSEPRjVBCphhIAE6+k/iwSg0TTQBIvN45YERdZeywQ7UnUfBEeaf5cEOtXt1QQCuD0ANhoAjgsBTQEsAPUA0gCvAI4AagBZADsAHQACIkMxGRREMRhENhoBF8AciASRTBZMFlAoTFCwI0MxGRREMRhENhoBF8AwiAQgSRUWVwYCTFAoTFCwI0MxGRREMRhEiAP4TwIWTwIWTwIWTgJQTFAoTFCwI0MxGRREMRhEiAOyFihMULAjQzEZFEQxGEQ2GgEXwByIA3pPAhZPAhZPAhZOAlBMUChMULAjQzEZFEQxGEQ2GgEXwDA2GgIXwDA2GgMXiAMEFihMULAjQzEZFEQxGEQ2GgFXAgA2GgJXAgA2GgMXwByIAm0WKExQsCNDMRkURDEYRDYaARfAMDYaAlcCADYaAxfAHIgBqhYoTFCwI0MxGRREMRhENhoBF8AcNhoCVwIANhoDVwIANhoEVwIANhoFFzYaBhc2GgdXAgCIAQ0WKExQsCNDIzEZkCQaRDEYRDYaAVcCAIgAVUkVFlcGAkxQKExQsCNDMRkURDEYFESIAA5JFRZXBgJMUChMULAjQycEImcnBSJnJwYjZycHJGcnCDEAZ4AWQWxnb1JlYWxtIGluaXRpYWxpemVkIYmKAQExGSMSQQAvMQAnCSJmMQAnCiJmMQArImYxACkqZoAWT3B0ZWQgaW4gdG8gQWxnb1JlYWxtIYkxACIpY0QqE0EAHIAZUGxheWVyIGFscmVhZHkgcmVnaXN0ZXJlZIkxACcJI2YxACcKImYxACsiZjEAKYABgGYiJwRlRCMIJwRMZ4v/sIAVV2VsY29tZSB0byBBbGdvUmVhbG0hiYoHATEAIicIZUQSRIv5IiljRCoTRLEyADIKRwOL+ov8ULIFsiyyK7IqsikisiQisiMjsiKAB0FMR0lURU2yJYv6siYkshCyAbO0PCInBWVEIwgnBUxngAxJdGVtIGNyZWF0ZWSwiYoDATEAIiljRCoTRIv9cQZIFUSL/oAAE0QxACIrY0QiJwdlREsBDUSL/XEESBVEgA9SRUNPVkVSRURfSVRFTV+L/lCxMgAyCkcDTwWyBbIssiuyKrIpIrIkIrIjI7IigAhBTEdSRUNPVrIlgA5SRUNPVkVSRURfSVRFTbImJLIQsgGztDxMIwgxACtPAmaADkl0ZW0gcmVjb3ZlcmVksImKAwExACIpY0QqE0SL/oAAE0SACVNFQVNPTkFMX4v+ULEyADIKSU8DsgWyKrIpIrIkIrIjI7IigAhBTEdTRUFTTrIlgA1TRUFTT05BTF9JVEVNsiYkshCyAbO0PIAUU2Vhc29uYWwgaXRlbSBpc3N1ZWSwiYoDATEAIiljRCoTRLEyADIKJwuyBbIpIrIkIrIjI7IigAhBTEdDUkFGVLIlJwuyJiSyELIBs7Q8gAxJdGVtIGNyYWZ0ZWSwiYoBA4v/IiljRCoTRIv/IicJY0SL/yInCmNEi/8iK2NEiTEAIicIZUQSRCInBmVEIwgnBksBZ4APU2Vhc29uIGFkdmFuY2VksIkiJwRlRCInBWVEIicGZUSJigEBMQAiKWNEKhNEi/9xB0gyAxNEsTIAMQCL/7IRI7ISshSBBLIQsgGzgAxJdGVtIGNsYWltZWSwgBpJdGVtIHN1Y2Nlc3NmdWxseSBjbGFpbWVkIYmKAQKL/yIpY0QqE0SL/yIrY0QiJwdlRIk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 9,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}