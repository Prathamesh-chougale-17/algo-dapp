{
    "name": "AlgoRealmGameManager",
    "structs": {},
    "methods": [
        {
            "name": "initialize_game",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "desc": "Initialize the game state - called once when contract is created",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "register_player",
            "args": [
                {
                    "type": "string",
                    "name": "player_name"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp",
                    "OptIn"
                ]
            },
            "readonly": false,
            "desc": "Register a new player in the game",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_game_item",
            "args": [
                {
                    "type": "account",
                    "name": "recipient"
                },
                {
                    "type": "string",
                    "name": "item_name"
                },
                {
                    "type": "string",
                    "name": "item_type"
                },
                {
                    "type": "string",
                    "name": "rarity"
                },
                {
                    "type": "uint64",
                    "name": "attack_power"
                },
                {
                    "type": "uint64",
                    "name": "defense_power"
                },
                {
                    "type": "string",
                    "name": "special_effect"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Create a new game item as an ASA",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "recover_lost_item",
            "args": [
                {
                    "type": "asset",
                    "name": "original_item_id"
                },
                {
                    "type": "byte[]",
                    "name": "recovery_quest_proof"
                },
                {
                    "type": "account",
                    "name": "new_recipient"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "ON-DEMAND TOKENIZATION: Recover a lost game item\nThis is the core feature for Task 6",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "seasonal_event_reissue",
            "args": [
                {
                    "type": "string",
                    "name": "event_name"
                },
                {
                    "type": "byte[]",
                    "name": "participation_proof"
                },
                {
                    "type": "account",
                    "name": "recipient"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "ON-DEMAND TOKENIZATION: Reissue seasonal event items\nAllows players to earn previous season items in new events",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "craft_items",
            "args": [
                {
                    "type": "asset",
                    "name": "material_1"
                },
                {
                    "type": "asset",
                    "name": "material_2"
                },
                {
                    "type": "uint64",
                    "name": "recipe_id"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Craft new items by combining existing ones\nDemonstrates atomic transactions",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_player_stats",
            "args": [
                {
                    "type": "account",
                    "name": "player"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get player statistics",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "advance_season",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Advance to next season (only game master)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_game_info",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get current game information",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "\n    Main game manager contract for AlgoRealm\n    Handles player registration, item management, and on-demand tokenization\n    ",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 4,
                "bytes": 1
            },
            "local": {
                "ints": 3,
                "bytes": 1
            }
        },
        "keys": {
            "global": {
                "total_players": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfcGxheWVycw=="
                },
                "total_items_created": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfaXRlbXNfY3JlYXRlZA=="
                },
                "game_master": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "Z2FtZV9tYXN0ZXI="
                },
                "current_season": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y3VycmVudF9zZWFzb24="
                },
                "max_recovery_per_item": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bWF4X3JlY292ZXJ5X3Blcl9pdGVt"
                }
            },
            "local": {
                "player_level": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cGxheWVyX2xldmVs"
                },
                "player_experience": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cGxheWVyX2V4cGVyaWVuY2U="
                },
                "player_recovery_count": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cGxheWVyX3JlY292ZXJ5X2NvdW50"
                },
                "is_registered": {
                    "keyType": "AVMString",
                    "valueType": "bool",
                    "key": "aXNfcmVnaXN0ZXJlZA=="
                }
            },
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        927
                    ],
                    "errorMessage": "Cannot get original item name"
                },
                {
                    "pc": [
                        1078
                    ],
                    "errorMessage": "Must provide participation proof"
                },
                {
                    "pc": [
                        905
                    ],
                    "errorMessage": "Must provide recovery quest proof"
                },
                {
                    "pc": [
                        259,
                        289,
                        306,
                        342,
                        375,
                        410,
                        445,
                        533
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        503
                    ],
                    "errorMessage": "OnCompletion is not one of NoOp, OptIn"
                },
                {
                    "pc": [
                        1330
                    ],
                    "errorMessage": "Only game master can advance season"
                },
                {
                    "pc": [
                        770
                    ],
                    "errorMessage": "Only game master can create items"
                },
                {
                    "pc": [
                        1208
                    ],
                    "errorMessage": "Only registered players can craft"
                },
                {
                    "pc": [
                        1072
                    ],
                    "errorMessage": "Only registered players can participate"
                },
                {
                    "pc": [
                        892
                    ],
                    "errorMessage": "Only registered players can recover items"
                },
                {
                    "pc": [
                        899
                    ],
                    "errorMessage": "Original item not found"
                },
                {
                    "pc": [
                        1300
                    ],
                    "errorMessage": "Player not registered"
                },
                {
                    "pc": [
                        779
                    ],
                    "errorMessage": "Recipient must be registered player"
                },
                {
                    "pc": [
                        920
                    ],
                    "errorMessage": "Recovery limit reached"
                },
                {
                    "pc": [
                        537
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        262,
                        292,
                        309,
                        345,
                        378,
                        413,
                        448,
                        506
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1335,
                        1376
                    ],
                    "errorMessage": "check self.current_season exists"
                },
                {
                    "pc": [
                        768,
                        1328
                    ],
                    "errorMessage": "check self.game_master exists"
                },
                {
                    "pc": [
                        663,
                        776,
                        889,
                        1069,
                        1205,
                        1297
                    ],
                    "errorMessage": "check self.is_registered exists for account"
                },
                {
                    "pc": [
                        916
                    ],
                    "errorMessage": "check self.max_recovery_per_item exists"
                },
                {
                    "pc": [
                        1314
                    ],
                    "errorMessage": "check self.player_experience exists for account"
                },
                {
                    "pc": [
                        1307
                    ],
                    "errorMessage": "check self.player_level exists for account"
                },
                {
                    "pc": [
                        911,
                        1320
                    ],
                    "errorMessage": "check self.player_recovery_count exists for account"
                },
                {
                    "pc": [
                        858,
                        1371
                    ],
                    "errorMessage": "check self.total_items_created exists"
                },
                {
                    "pc": [
                        725,
                        1366
                    ],
                    "errorMessage": "check self.total_players exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAAEDBCYMBBUffHUNaXNfcmVnaXN0ZXJlZAEAFXBsYXllcl9yZWNvdmVyeV9jb3VudA10b3RhbF9wbGF5ZXJzE3RvdGFsX2l0ZW1zX2NyZWF0ZWQOY3VycmVudF9zZWFzb24LZ2FtZV9tYXN0ZXIMcGxheWVyX2xldmVsEXBsYXllcl9leHBlcmllbmNlFW1heF9yZWNvdmVyeV9wZXJfaXRlbQxDUkFGVEVEX0lURU0xG0EARoIJBLNarDsEhD0Y1QQqYYSABOvpP4sEoNE00ASLzeOWBEXWXssEO1J1HwRHmn+XNhoAjgkBFADzALwAmQB2AFUAMQAgAAIiQzEZFEQxGESIBEhPAhZPAhZPAhZOAlBMUChMULAjQzEZFEQxGESIBAIWKExQsCNDMRkURDEYRDYaARfAHIgDyk8CFk8CFk8CFk4CUExQKExQsCNDMRkURDEYRDYaARfAMDYaAhfAMDYaAxeIA0AWKExQsCNDMRkURDEYRDYaAVcCADYaAlcCADYaAxfAHIgClRYoTFCwI0MxGRREMRhENhoBF8AwNhoCVwIANhoDF8AciAG+FihMULAjQzEZFEQxGEQ2GgEXwBw2GgJXAgA2GgNXAgA2GgRXAgA2GgUXNhoGFzYaB1cCAIgBDRYoTFCwI0MjMRmQJBpEMRhENhoBVwIAiABVSRUWVwYCTFAoTFCwI0MxGRREMRgURIgADkkVFlcGAkxQKExQsCNDJwQiZycFImcnBiNnJwokZycHMQBngBZBbGdvUmVhbG0gaW5pdGlhbGl6ZWQhiYoBATEZIxJBAC8xACcIImYxACcJImYxACsiZjEAKSpmgBZPcHRlZCBpbiB0byBBbGdvUmVhbG0hiTEAIiljRCoTQQAcgBlQbGF5ZXIgYWxyZWFkeSByZWdpc3RlcmVkiTEAJwgjZjEAJwkiZjEAKyJmMQApgAGAZiInBGVEIwgnBExni/+wgBVXZWxjb21lIHRvIEFsZ29SZWFsbSGJigcBMQAiJwdlRBJEi/kiKWNEKhNEsTIAMgpHA4v6i/xQsgWyLLIrsiqyKSKyJCKyIyOyIoAHQUxHSVRFTbIli/qyJiSyELIBs7Q8sTIASwGyESOyEov5shQlshCyAbMiJwVlRCMIJwVMZ4AMSXRlbSBjcmVhdGVksImKAwExACIpY0QqE0SL/XEGSBVEi/6AABNEMQAiK2NEIicKZURLAQ1Ei/1xBEgVRIAPUkVDT1ZFUkVEX0lURU1fi/5QsTIAMgpHA08FsgWyLLIrsiqyKSKyJCKyIyOyIoAIQUxHUkVDT1ayJYAOUkVDT1ZFUkVEX0lURU2yJiSyELIBs7Q8sTIASwGyESOyEov/shQlshCyAbNMIwgxACtPAmaADkl0ZW0gcmVjb3ZlcmVksImKAwExACIpY0QqE0SL/oAAE0SACVNFQVNPTkFMX4v+ULEyADIKSU8DsgWyKrIpIrIkIrIjI7IigAhBTEdTRUFTTrIlgA1TRUFTT05BTF9JVEVNsiYkshCyAbO0PLEyAEsBshEjshKL/7IUJbIQsgGzgBRTZWFzb25hbCBpdGVtIGlzc3VlZLCJigMBMQAiKWNEKhNEsTIAMgonC7IFsikisiQisiMjsiKACEFMR0NSQUZUsiUnC7ImJLIQsgGztDyxMgAxAEsCshEjshKyFCWyELIBs4AMSXRlbSBjcmFmdGVksImKAQOL/yIpY0QqE0SL/yInCGNEi/8iJwljRIv/IitjRIkxACInB2VEEkQiJwZlRCMIJwZLAWeAD1NlYXNvbiBhZHZhbmNlZLCJIicEZUQiJwVlRCInBmVEiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 9,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}