{
    "name": "AlgoRealmGameManager",
    "structs": {},
    "methods": [
        {
            "name": "initialize_game",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "desc": "Initialize the game state - called once when contract is created",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "register_player",
            "args": [
                {
                    "type": "string",
                    "name": "player_name"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp",
                    "OptIn"
                ]
            },
            "readonly": false,
            "desc": "Register a new player in the game",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_game_item",
            "args": [
                {
                    "type": "account",
                    "name": "recipient"
                },
                {
                    "type": "string",
                    "name": "item_name"
                },
                {
                    "type": "string",
                    "name": "item_type"
                },
                {
                    "type": "string",
                    "name": "rarity"
                },
                {
                    "type": "uint64",
                    "name": "attack_power"
                },
                {
                    "type": "uint64",
                    "name": "defense_power"
                },
                {
                    "type": "string",
                    "name": "special_effect"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Create a new game item as an ASA",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "recover_lost_item",
            "args": [
                {
                    "type": "asset",
                    "name": "original_item_id"
                },
                {
                    "type": "byte[]",
                    "name": "recovery_quest_proof"
                },
                {
                    "type": "account",
                    "name": "new_recipient"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "ON-DEMAND TOKENIZATION: Recover a lost game item\nThis is the core feature for Task 6",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "seasonal_event_reissue",
            "args": [
                {
                    "type": "string",
                    "name": "event_name"
                },
                {
                    "type": "byte[]",
                    "name": "participation_proof"
                },
                {
                    "type": "account",
                    "name": "recipient"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "ON-DEMAND TOKENIZATION: Reissue seasonal event items\nAllows players to earn previous season items in new events",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "craft_items",
            "args": [
                {
                    "type": "asset",
                    "name": "material_1"
                },
                {
                    "type": "asset",
                    "name": "material_2"
                },
                {
                    "type": "uint64",
                    "name": "recipe_id"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Craft new items by combining existing ones\nDemonstrates atomic transactions",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_player_stats",
            "args": [
                {
                    "type": "account",
                    "name": "player"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get player statistics",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "advance_season",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Advance to next season (only game master)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_game_info",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get current game information",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "claim_item",
            "args": [
                {
                    "type": "asset",
                    "name": "item_id"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Claim an item that was created for the player.\nPlayer must have opted-in to the asset before calling this.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_recovery_status",
            "args": [
                {
                    "type": "account",
                    "name": "player"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get player's current recovery count and max allowed recoveries",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_item_ownership_info",
            "args": [
                {
                    "type": "asset",
                    "name": "item_id"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get information about the item including its ownership\nReturns a string description of the item's ownership info\nThe owner information is embedded in the note field with format: [other data]OWNER:[address]\nExternal systems can parse this to extract specific owner information",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "check_item_exists",
            "args": [
                {
                    "type": "asset",
                    "name": "item_id"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Verify if the item exists\nReturns true if the asset exists",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "\n    Main game manager contract for AlgoRealm\n    Handles player registration, item management, and on-demand tokenization\n    ",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 4,
                "bytes": 1
            },
            "local": {
                "ints": 3,
                "bytes": 1
            }
        },
        "keys": {
            "global": {
                "total_players": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfcGxheWVycw=="
                },
                "total_items_created": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfaXRlbXNfY3JlYXRlZA=="
                },
                "game_master": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "Z2FtZV9tYXN0ZXI="
                },
                "current_season": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y3VycmVudF9zZWFzb24="
                },
                "max_recovery_per_item": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bWF4X3JlY292ZXJ5X3Blcl9pdGVt"
                }
            },
            "local": {
                "player_level": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cGxheWVyX2xldmVs"
                },
                "player_experience": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cGxheWVyX2V4cGVyaWVuY2U="
                },
                "player_recovery_count": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cGxheWVyX3JlY292ZXJ5X2NvdW50"
                },
                "is_registered": {
                    "keyType": "AVMString",
                    "valueType": "bool",
                    "key": "aXNfcmVnaXN0ZXJlZA=="
                }
            },
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1493
                    ],
                    "errorMessage": "Asset not found"
                },
                {
                    "pc": [
                        1059
                    ],
                    "errorMessage": "Cannot get original item name"
                },
                {
                    "pc": [
                        1197
                    ],
                    "errorMessage": "Must provide participation proof"
                },
                {
                    "pc": [
                        1037
                    ],
                    "errorMessage": "Must provide recovery quest proof"
                },
                {
                    "pc": [
                        293,
                        315,
                        345,
                        372,
                        402,
                        432,
                        449,
                        485,
                        518,
                        553,
                        588,
                        676
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        646
                    ],
                    "errorMessage": "OnCompletion is not one of NoOp, OptIn"
                },
                {
                    "pc": [
                        1425
                    ],
                    "errorMessage": "Only game master can advance season"
                },
                {
                    "pc": [
                        913
                    ],
                    "errorMessage": "Only game master can create items"
                },
                {
                    "pc": [
                        1484
                    ],
                    "errorMessage": "Only registered players can claim items"
                },
                {
                    "pc": [
                        1314
                    ],
                    "errorMessage": "Only registered players can craft"
                },
                {
                    "pc": [
                        1191
                    ],
                    "errorMessage": "Only registered players can participate"
                },
                {
                    "pc": [
                        1024
                    ],
                    "errorMessage": "Only registered players can recover items"
                },
                {
                    "pc": [
                        1031
                    ],
                    "errorMessage": "Original item not found"
                },
                {
                    "pc": [
                        1395,
                        1570
                    ],
                    "errorMessage": "Player not registered"
                },
                {
                    "pc": [
                        922
                    ],
                    "errorMessage": "Recipient must be registered player"
                },
                {
                    "pc": [
                        1052
                    ],
                    "errorMessage": "Recovery limit reached - max 3 recoveries per player"
                },
                {
                    "pc": [
                        680
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        296,
                        318,
                        348,
                        375,
                        405,
                        435,
                        452,
                        488,
                        521,
                        556,
                        591,
                        649
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1430,
                        1471
                    ],
                    "errorMessage": "check self.current_season exists"
                },
                {
                    "pc": [
                        911,
                        1423
                    ],
                    "errorMessage": "check self.game_master exists"
                },
                {
                    "pc": [
                        806,
                        919,
                        1021,
                        1188,
                        1311,
                        1392,
                        1481,
                        1567
                    ],
                    "errorMessage": "check self.is_registered exists for account"
                },
                {
                    "pc": [
                        1048,
                        1581
                    ],
                    "errorMessage": "check self.max_recovery_per_item exists"
                },
                {
                    "pc": [
                        1409
                    ],
                    "errorMessage": "check self.player_experience exists for account"
                },
                {
                    "pc": [
                        1402
                    ],
                    "errorMessage": "check self.player_level exists for account"
                },
                {
                    "pc": [
                        1043,
                        1415,
                        1576
                    ],
                    "errorMessage": "check self.player_recovery_count exists for account"
                },
                {
                    "pc": [
                        990,
                        1466
                    ],
                    "errorMessage": "check self.total_items_created exists"
                },
                {
                    "pc": [
                        868,
                        1461
                    ],
                    "errorMessage": "check self.total_players exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 9,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}