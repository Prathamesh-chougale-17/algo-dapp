# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": []}, "methods": [{"actions": {"call": [], "create": ["NoOp"]}, "args": [], "name": "initialize_game", "returns": {"type": "string"}, "desc": "Initialize the game state - called once when contract is created", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp", "OptIn"], "create": []}, "args": [{"type": "string", "name": "player_name"}], "name": "register_player", "returns": {"type": "string"}, "desc": "Register a new player in the game", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "recipient"}, {"type": "string", "name": "item_name"}, {"type": "string", "name": "item_type"}, {"type": "string", "name": "rarity"}, {"type": "uint64", "name": "attack_power"}, {"type": "uint64", "name": "defense_power"}, {"type": "string", "name": "special_effect"}], "name": "create_game_item", "returns": {"type": "uint64"}, "desc": "Create a new game item as an ASA", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "asset", "name": "original_item_id"}, {"type": "byte[]", "name": "recovery_quest_proof"}, {"type": "account", "name": "new_recipient"}], "name": "recover_lost_item", "returns": {"type": "uint64"}, "desc": "ON-DEMAND TOKENIZATION: Recover a lost game item\nThis is the core feature for Task 6", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "string", "name": "event_name"}, {"type": "byte[]", "name": "participation_proof"}, {"type": "account", "name": "recipient"}], "name": "seasonal_event_reissue", "returns": {"type": "uint64"}, "desc": "ON-DEMAND TOKENIZATION: Reissue seasonal event items\nAllows players to earn previous season items in new events", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "asset", "name": "material_1"}, {"type": "asset", "name": "material_2"}, {"type": "uint64", "name": "recipe_id"}], "name": "craft_items", "returns": {"type": "uint64"}, "desc": "Craft new items by combining existing ones\nDemonstrates atomic transactions", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "player"}], "name": "get_player_stats", "returns": {"type": "(uint64,uint64,uint64)"}, "desc": "Get player statistics", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "advance_season", "returns": {"type": "uint64"}, "desc": "Advance to next season (only game master)", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_game_info", "returns": {"type": "(uint64,uint64,uint64)"}, "desc": "Get current game information", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "asset", "name": "item_id"}], "name": "claim_item", "returns": {"type": "string"}, "desc": "Claim an item that was created for the player.\nPlayer must have opted-in to the asset before calling this.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "player"}], "name": "get_recovery_status", "returns": {"type": "(uint64,uint64)"}, "desc": "Get player's current recovery count and max allowed recoveries", "events": [], "readonly": true, "recommendations": {}}], "name": "AlgoRealmGameManager", "state": {"keys": {"box": {}, "global": {"total_players": {"key": "dG90YWxfcGxheWVycw==", "keyType": "AVMString", "valueType": "AVMUint64"}, "total_items_created": {"key": "dG90YWxfaXRlbXNfY3JlYXRlZA==", "keyType": "AVMString", "valueType": "AVMUint64"}, "game_master": {"key": "Z2FtZV9tYXN0ZXI=", "keyType": "AVMString", "valueType": "address"}, "current_season": {"key": "Y3VycmVudF9zZWFzb24=", "keyType": "AVMString", "valueType": "AVMUint64"}, "max_recovery_per_item": {"key": "bWF4X3JlY292ZXJ5X3Blcl9pdGVt", "keyType": "AVMString", "valueType": "AVMUint64"}}, "local": {"player_level": {"key": "cGxheWVyX2xldmVs", "keyType": "AVMString", "valueType": "AVMUint64"}, "player_experience": {"key": "cGxheWVyX2V4cGVyaWVuY2U=", "keyType": "AVMString", "valueType": "AVMUint64"}, "player_recovery_count": {"key": "cGxheWVyX3JlY292ZXJ5X2NvdW50", "keyType": "AVMString", "valueType": "AVMUint64"}, "is_registered": {"key": "aXNfcmVnaXN0ZXJlZA==", "keyType": "AVMString", "valueType": "bool"}}}, "maps": {"box": {}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 1, "ints": 4}, "local": {"bytes": 1, "ints": 3}}}, "structs": {}, "byteCode": {"approval": "CiADAAEDJgwEFR98dQ1pc19yZWdpc3RlcmVkAQAVcGxheWVyX3JlY292ZXJ5X2NvdW50DXRvdGFsX3BsYXllcnMTdG90YWxfaXRlbXNfY3JlYXRlZA5jdXJyZW50X3NlYXNvbhVtYXhfcmVjb3ZlcnlfcGVyX2l0ZW0LZ2FtZV9tYXN0ZXIMcGxheWVyX2xldmVsEXBsYXllcl9leHBlcmllbmNlDENSQUZURURfSVRFTTEbQQBUggsEs1qsOwSEPRjVBCphhIAE6+k/iwSg0TTQBIvN45YERdZeywQ7UnUfBEeaf5cEOtXt1QQCuD0ANhoAjgsBTQEsAPUA0gCvAI4AagBZADsAHQACIkMxGRREMRhENhoBF8AciASRTBZMFlAoTFCwI0MxGRREMRhENhoBF8AwiAQgSRUWVwYCTFAoTFCwI0MxGRREMRhEiAP4TwIWTwIWTwIWTgJQTFAoTFCwI0MxGRREMRhEiAOyFihMULAjQzEZFEQxGEQ2GgEXwByIA3pPAhZPAhZPAhZOAlBMUChMULAjQzEZFEQxGEQ2GgEXwDA2GgIXwDA2GgMXiAMEFihMULAjQzEZFEQxGEQ2GgFXAgA2GgJXAgA2GgMXwByIAm0WKExQsCNDMRkURDEYRDYaARfAMDYaAlcCADYaAxfAHIgBqhYoTFCwI0MxGRREMRhENhoBF8AcNhoCVwIANhoDVwIANhoEVwIANhoFFzYaBhc2GgdXAgCIAQ0WKExQsCNDIzEZkCQaRDEYRDYaAVcCAIgAVUkVFlcGAkxQKExQsCNDMRkURDEYFESIAA5JFRZXBgJMUChMULAjQycEImcnBSJnJwYjZycHJGcnCDEAZ4AWQWxnb1JlYWxtIGluaXRpYWxpemVkIYmKAQExGSMSQQAvMQAnCSJmMQAnCiJmMQArImYxACkqZoAWT3B0ZWQgaW4gdG8gQWxnb1JlYWxtIYkxACIpY0QqE0EAHIAZUGxheWVyIGFscmVhZHkgcmVnaXN0ZXJlZIkxACcJI2YxACcKImYxACsiZjEAKYABgGYiJwRlRCMIJwRMZ4v/sIAVV2VsY29tZSB0byBBbGdvUmVhbG0hiYoHATEAIicIZUQSRIv5IiljRCoTRLEyADIKRwOL+ov8ULIFsiyyK7IqsikisiQisiMjsiKAB0FMR0lURU2yJYv6siYkshCyAbO0PCInBWVEIwgnBUxngAxJdGVtIGNyZWF0ZWSwiYoDATEAIiljRCoTRIv9cQZIFUSL/oAAE0QxACIrY0QiJwdlREsBDUSL/XEESBVEgA9SRUNPVkVSRURfSVRFTV+L/lCxMgAyCkcDTwWyBbIssiuyKrIpIrIkIrIjI7IigAhBTEdSRUNPVrIlgA5SRUNPVkVSRURfSVRFTbImJLIQsgGztDxMIwgxACtPAmaADkl0ZW0gcmVjb3ZlcmVksImKAwExACIpY0QqE0SL/oAAE0SACVNFQVNPTkFMX4v+ULEyADIKSU8DsgWyKrIpIrIkIrIjI7IigAhBTEdTRUFTTrIlgA1TRUFTT05BTF9JVEVNsiYkshCyAbO0PIAUU2Vhc29uYWwgaXRlbSBpc3N1ZWSwiYoDATEAIiljRCoTRLEyADIKJwuyBbIpIrIkIrIjI7IigAhBTEdDUkFGVLIlJwuyJiSyELIBs7Q8gAxJdGVtIGNyYWZ0ZWSwiYoBA4v/IiljRCoTRIv/IicJY0SL/yInCmNEi/8iK2NEiTEAIicIZUQSRCInBmVEIwgnBksBZ4APU2Vhc29uIGFkdmFuY2VksIkiJwRlRCInBWVEIicGZUSJigEBMQAiKWNEKhNEi/9xB0gyAxNEsTIAMQCL/7IRI7ISshSBBLIQsgGzgAxJdGVtIGNsYWltZWSwgBpJdGVtIHN1Y2Nlc3NmdWxseSBjbGFpbWVkIYmKAQKL/yIpY0QqE0SL/yIrY0QiJwdlRIk=", "clear": "CoEBQw=="}, "compilerInfo": {"compiler": "puya", "compilerVersion": {"major": 4, "minor": 9, "patch": 0}}, "desc": "\n    Main game manager contract for AlgoRealm\n    Handles player registration, item management, and on-demand tokenization\n    ", "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [1388], "errorMessage": "Asset not found"}, {"pc": [977], "errorMessage": "Cannot get original item name"}, {"pc": [1108], "errorMessage": "Must provide participation proof"}, {"pc": [955], "errorMessage": "Must provide recovery quest proof"}, {"pc": [272, 299, 329, 359, 376, 412, 445, 480, 515, 603], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [573], "errorMessage": "OnCompletion is not one of NoOp, OptIn"}, {"pc": [1320], "errorMessage": "Only game master can advance season"}, {"pc": [840], "errorMessage": "Only game master can create items"}, {"pc": [1379], "errorMessage": "Only registered players can claim items"}, {"pc": [1218], "errorMessage": "Only registered players can craft"}, {"pc": [1102], "errorMessage": "Only registered players can participate"}, {"pc": [942], "errorMessage": "Only registered players can recover items"}, {"pc": [949], "errorMessage": "Original item not found"}, {"pc": [1290, 1465], "errorMessage": "Player not registered"}, {"pc": [849], "errorMessage": "Recipient must be registered player"}, {"pc": [970], "errorMessage": "Recovery limit reached - max 3 recoveries per player"}, {"pc": [607], "errorMessage": "can only call when creating"}, {"pc": [275, 302, 332, 362, 379, 415, 448, 483, 518, 576], "errorMessage": "can only call when not creating"}, {"pc": [1325, 1366], "errorMessage": "check self.current_season exists"}, {"pc": [838, 1318], "errorMessage": "check self.game_master exists"}, {"pc": [733, 846, 939, 1099, 1215, 1287, 1376, 1462], "errorMessage": "check self.is_registered exists for account"}, {"pc": [966, 1476], "errorMessage": "check self.max_recovery_per_item exists"}, {"pc": [1304], "errorMessage": "check self.player_experience exists for account"}, {"pc": [1297], "errorMessage": "check self.player_level exists for account"}, {"pc": [961, 1310, 1471], "errorMessage": "check self.player_recovery_count exists for account"}, {"pc": [908, 1361], "errorMessage": "check self.total_items_created exists"}, {"pc": [795, 1356], "errorMessage": "check self.total_players exists"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True, kw_only=True)
class RegisterPlayerArgs:
    """Dataclass for register_player arguments"""
    player_name: str

    @property
    def abi_method_signature(self) -> str:
        return "register_player(string)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class CreateGameItemArgs:
    """Dataclass for create_game_item arguments"""
    recipient: str | bytes
    item_name: str
    item_type: str
    rarity: str
    attack_power: int
    defense_power: int
    special_effect: str

    @property
    def abi_method_signature(self) -> str:
        return "create_game_item(account,string,string,string,uint64,uint64,string)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class RecoverLostItemArgs:
    """Dataclass for recover_lost_item arguments"""
    original_item_id: int
    recovery_quest_proof: bytes | str
    new_recipient: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "recover_lost_item(asset,byte[],account)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SeasonalEventReissueArgs:
    """Dataclass for seasonal_event_reissue arguments"""
    event_name: str
    participation_proof: bytes | str
    recipient: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "seasonal_event_reissue(string,byte[],account)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class CraftItemsArgs:
    """Dataclass for craft_items arguments"""
    material_1: int
    material_2: int
    recipe_id: int

    @property
    def abi_method_signature(self) -> str:
        return "craft_items(asset,asset,uint64)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetPlayerStatsArgs:
    """Dataclass for get_player_stats arguments"""
    player: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "get_player_stats(account)(uint64,uint64,uint64)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ClaimItemArgs:
    """Dataclass for claim_item arguments"""
    item_id: int

    @property
    def abi_method_signature(self) -> str:
        return "claim_item(asset)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetRecoveryStatusArgs:
    """Dataclass for get_recovery_status arguments"""
    player: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "get_recovery_status(account)(uint64,uint64)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class RegisterPlayerArgs:
    """Dataclass for register_player arguments"""
    player_name: str

    @property
    def abi_method_signature(self) -> str:
        return "register_player(string)string"


class _AlgoRealmGameManagerOptIn:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def register_player(
        self,
        args: tuple[str] | RegisterPlayerArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.opt_in(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "register_player(string)string",
            "args": method_args,
        }))


class AlgoRealmGameManagerParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def opt_in(self) -> "_AlgoRealmGameManagerOptIn":
        return _AlgoRealmGameManagerOptIn(self.app_client)

    def register_player(
        self,
        args: tuple[str] | RegisterPlayerArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "register_player(string)string",
            "args": method_args,
        }))

    def create_game_item(
        self,
        args: tuple[str | bytes, str, str, str, int, int, str] | CreateGameItemArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_game_item(account,string,string,string,uint64,uint64,string)uint64",
            "args": method_args,
        }))

    def recover_lost_item(
        self,
        args: tuple[int, bytes | str, str | bytes] | RecoverLostItemArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "recover_lost_item(asset,byte[],account)uint64",
            "args": method_args,
        }))

    def seasonal_event_reissue(
        self,
        args: tuple[str, bytes | str, str | bytes] | SeasonalEventReissueArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "seasonal_event_reissue(string,byte[],account)uint64",
            "args": method_args,
        }))

    def craft_items(
        self,
        args: tuple[int, int, int] | CraftItemsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "craft_items(asset,asset,uint64)uint64",
            "args": method_args,
        }))

    def get_player_stats(
        self,
        args: tuple[str | bytes] | GetPlayerStatsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_player_stats(account)(uint64,uint64,uint64)",
            "args": method_args,
        }))

    def advance_season(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "advance_season()uint64",
        }))

    def get_game_info(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_game_info()(uint64,uint64,uint64)",
        }))

    def claim_item(
        self,
        args: tuple[int] | ClaimItemArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "claim_item(asset)string",
            "args": method_args,
        }))

    def get_recovery_status(
        self,
        args: tuple[str | bytes] | GetRecoveryStatusArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_recovery_status(account)(uint64,uint64)",
            "args": method_args,
        }))

    def initialize_game(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "initialize_game()string",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class _AlgoRealmGameManagerOptInTransaction:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def register_player(
        self,
        args: tuple[str] | RegisterPlayerArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.opt_in(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "register_player(string)string",
            "args": method_args,
        }))


class AlgoRealmGameManagerCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def opt_in(self) -> "_AlgoRealmGameManagerOptInTransaction":
        return _AlgoRealmGameManagerOptInTransaction(self.app_client)

    def register_player(
        self,
        args: tuple[str] | RegisterPlayerArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "register_player(string)string",
            "args": method_args,
        }))

    def create_game_item(
        self,
        args: tuple[str | bytes, str, str, str, int, int, str] | CreateGameItemArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_game_item(account,string,string,string,uint64,uint64,string)uint64",
            "args": method_args,
        }))

    def recover_lost_item(
        self,
        args: tuple[int, bytes | str, str | bytes] | RecoverLostItemArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "recover_lost_item(asset,byte[],account)uint64",
            "args": method_args,
        }))

    def seasonal_event_reissue(
        self,
        args: tuple[str, bytes | str, str | bytes] | SeasonalEventReissueArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "seasonal_event_reissue(string,byte[],account)uint64",
            "args": method_args,
        }))

    def craft_items(
        self,
        args: tuple[int, int, int] | CraftItemsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "craft_items(asset,asset,uint64)uint64",
            "args": method_args,
        }))

    def get_player_stats(
        self,
        args: tuple[str | bytes] | GetPlayerStatsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_player_stats(account)(uint64,uint64,uint64)",
            "args": method_args,
        }))

    def advance_season(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "advance_season()uint64",
        }))

    def get_game_info(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_game_info()(uint64,uint64,uint64)",
        }))

    def claim_item(
        self,
        args: tuple[int] | ClaimItemArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "claim_item(asset)string",
            "args": method_args,
        }))

    def get_recovery_status(
        self,
        args: tuple[str | bytes] | GetRecoveryStatusArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_recovery_status(account)(uint64,uint64)",
            "args": method_args,
        }))

    def initialize_game(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "initialize_game()string",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class _AlgoRealmGameManagerOptInSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def register_player(
        self,
        args: tuple[str] | RegisterPlayerArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.opt_in(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "register_player(string)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)


class AlgoRealmGameManagerSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def opt_in(self) -> "_AlgoRealmGameManagerOptInSend":
        return _AlgoRealmGameManagerOptInSend(self.app_client)

    def register_player(
        self,
        args: tuple[str] | RegisterPlayerArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "register_player(string)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def create_game_item(
        self,
        args: tuple[str | bytes, str, str, str, int, int, str] | CreateGameItemArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_game_item(account,string,string,string,uint64,uint64,string)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def recover_lost_item(
        self,
        args: tuple[int, bytes | str, str | bytes] | RecoverLostItemArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "recover_lost_item(asset,byte[],account)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def seasonal_event_reissue(
        self,
        args: tuple[str, bytes | str, str | bytes] | SeasonalEventReissueArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "seasonal_event_reissue(string,byte[],account)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def craft_items(
        self,
        args: tuple[int, int, int] | CraftItemsArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "craft_items(asset,asset,uint64)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def get_player_stats(
        self,
        args: tuple[str | bytes] | GetPlayerStatsArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[tuple[int, int, int]]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_player_stats(account)(uint64,uint64,uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[tuple[int, int, int]], parsed_response)

    def advance_season(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "advance_season()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def get_game_info(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[tuple[int, int, int]]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_game_info()(uint64,uint64,uint64)",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[tuple[int, int, int]], parsed_response)

    def claim_item(
        self,
        args: tuple[int] | ClaimItemArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "claim_item(asset)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def get_recovery_status(
        self,
        args: tuple[str | bytes] | GetRecoveryStatusArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[tuple[int, int]]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_recovery_status(account)(uint64,uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[tuple[int, int]], parsed_response)

    def initialize_game(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "initialize_game()string",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    total_players: int
    total_items_created: int
    game_master: str
    current_season: int
    max_recovery_per_item: int

class LocalStateValue(typing.TypedDict):
    """Shape of local_state state key values"""
    player_level: int
    player_experience: int
    player_recovery_count: int
    is_registered: bool

class AlgoRealmGameManagerState:
    """Methods to access state for the current AlgoRealmGameManager app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

    def local_state(
        self, address: str
    ) -> "_LocalState":
            """Methods to access local_state for the current app"""
            return _LocalState(self.app_client, address)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def total_players(self) -> int:
        """Get the current value of the total_players key in global_state state"""
        value = self.app_client.state.global_state.get_value("total_players")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def total_items_created(self) -> int:
        """Get the current value of the total_items_created key in global_state state"""
        value = self.app_client.state.global_state.get_value("total_items_created")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def game_master(self) -> str:
        """Get the current value of the game_master key in global_state state"""
        value = self.app_client.state.global_state.get_value("game_master")
        if isinstance(value, dict) and "address" in self._struct_classes:
            return _init_dataclass(self._struct_classes["address"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def current_season(self) -> int:
        """Get the current value of the current_season key in global_state state"""
        value = self.app_client.state.global_state.get_value("current_season")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def max_recovery_per_item(self) -> int:
        """Get the current value of the max_recovery_per_item key in global_state state"""
        value = self.app_client.state.global_state.get_value("max_recovery_per_item")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

class _LocalState:
    def __init__(self, app_client: algokit_utils.AppClient, address: str):
        self.app_client = app_client
        self.address = address
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> LocalStateValue:
        """Get all current keyed values from local_state state"""
        result = self.app_client.state.local_state(self.address).get_all()
        if not result:
            return typing.cast(LocalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.local_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(LocalStateValue, converted)

    @property
    def player_level(self) -> int:
        """Get the current value of the player_level key in local_state state"""
        value = self.app_client.state.local_state(self.address).get_value("player_level")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def player_experience(self) -> int:
        """Get the current value of the player_experience key in local_state state"""
        value = self.app_client.state.local_state(self.address).get_value("player_experience")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def player_recovery_count(self) -> int:
        """Get the current value of the player_recovery_count key in local_state state"""
        value = self.app_client.state.local_state(self.address).get_value("player_recovery_count")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def is_registered(self) -> bool:
        """Get the current value of the is_registered key in local_state state"""
        value = self.app_client.state.local_state(self.address).get_value("is_registered")
        if isinstance(value, dict) and "bool" in self._struct_classes:
            return _init_dataclass(self._struct_classes["bool"], value)  # type: ignore
        return typing.cast(bool, value)

class AlgoRealmGameManagerClient:
    """Client for interacting with AlgoRealmGameManager smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = AlgoRealmGameManagerParams(self.app_client)
        self.create_transaction = AlgoRealmGameManagerCreateTransactionParams(self.app_client)
        self.send = AlgoRealmGameManagerSend(self.app_client)
        self.state = AlgoRealmGameManagerState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "AlgoRealmGameManagerClient":
        return AlgoRealmGameManagerClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "AlgoRealmGameManagerClient":
        return AlgoRealmGameManagerClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "AlgoRealmGameManagerClient":
        return AlgoRealmGameManagerClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "AlgoRealmGameManagerComposer":
        return AlgoRealmGameManagerComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["register_player(string)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["create_game_item(account,string,string,string,uint64,uint64,string)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["recover_lost_item(asset,byte[],account)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["seasonal_event_reissue(string,byte[],account)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["craft_items(asset,asset,uint64)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_player_stats(account)(uint64,uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> tuple[int, int, int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["advance_season()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_game_info()(uint64,uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> tuple[int, int, int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["claim_item(asset)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_recovery_status(account)(uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> tuple[int, int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["initialize_game()string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["register_player(string)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | int | str | tuple[int, int, int] | tuple[int, int]:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class AlgoRealmGameManagerMethodCallCreateParams(
    algokit_utils.AppClientCreateSchema, algokit_utils.BaseAppClientMethodCallParams[
        typing.Any,
        str | None,
    ]
):
    """Parameters for creating AlgoRealmGameManager contract using ABI"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None
    method: str | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallCreateParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallCreateParams(
            **{
                **self.__dict__,
                "method": self.method or getattr(self.args, "abi_method_signature", None),
                "args": method_args,
            }
        )

class AlgoRealmGameManagerFactory(algokit_utils.TypedAppFactoryProtocol[AlgoRealmGameManagerMethodCallCreateParams, None, None]):
    """Factory for deploying and managing AlgoRealmGameManagerClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = AlgoRealmGameManagerFactoryParams(self.app_factory)
        self.create_transaction = AlgoRealmGameManagerFactoryCreateTransaction(self.app_factory)
        self.send = AlgoRealmGameManagerFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: AlgoRealmGameManagerMethodCallCreateParams | None = None,
        update_params: None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[AlgoRealmGameManagerClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return AlgoRealmGameManagerClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> AlgoRealmGameManagerClient:
        """Get an app client by creator address and name"""
        return AlgoRealmGameManagerClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> AlgoRealmGameManagerClient:
        """Get an app client by app ID"""
        return AlgoRealmGameManagerClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class AlgoRealmGameManagerFactoryParams:
    """Parameters for creating transactions for AlgoRealmGameManager contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = AlgoRealmGameManagerFactoryCreateParams(app_factory)
        self.update = AlgoRealmGameManagerFactoryUpdateParams(app_factory)
        self.delete = AlgoRealmGameManagerFactoryDeleteParams(app_factory)

class AlgoRealmGameManagerFactoryCreateParams:
    """Parameters for 'create' operations of AlgoRealmGameManager contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def register_player(
        self,
        args: tuple[str] | RegisterPlayerArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the register_player(string)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "register_player(string)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def create_game_item(
        self,
        args: tuple[str | bytes, str, str, str, int, int, str] | CreateGameItemArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the create_game_item(account,string,string,string,uint64,uint64,string)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "create_game_item(account,string,string,string,uint64,uint64,string)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def recover_lost_item(
        self,
        args: tuple[int, bytes | str, str | bytes] | RecoverLostItemArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the recover_lost_item(asset,byte[],account)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "recover_lost_item(asset,byte[],account)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def seasonal_event_reissue(
        self,
        args: tuple[str, bytes | str, str | bytes] | SeasonalEventReissueArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the seasonal_event_reissue(string,byte[],account)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "seasonal_event_reissue(string,byte[],account)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def craft_items(
        self,
        args: tuple[int, int, int] | CraftItemsArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the craft_items(asset,asset,uint64)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "craft_items(asset,asset,uint64)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_player_stats(
        self,
        args: tuple[str | bytes] | GetPlayerStatsArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_player_stats(account)(uint64,uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_player_stats(account)(uint64,uint64,uint64)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def advance_season(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the advance_season()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "advance_season()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def get_game_info(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_game_info()(uint64,uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_game_info()(uint64,uint64,uint64)",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def claim_item(
        self,
        args: tuple[int] | ClaimItemArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the claim_item(asset)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "claim_item(asset)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_recovery_status(
        self,
        args: tuple[str | bytes] | GetRecoveryStatusArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_recovery_status(account)(uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_recovery_status(account)(uint64,uint64)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def initialize_game(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the initialize_game()string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "initialize_game()string",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def register_player(
        self,
        args: tuple[str] | RegisterPlayerArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the register_player(string)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "register_player(string)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

class AlgoRealmGameManagerFactoryUpdateParams:
    """Parameters for 'update' operations of AlgoRealmGameManager contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class AlgoRealmGameManagerFactoryDeleteParams:
    """Parameters for 'delete' operations of AlgoRealmGameManager contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class AlgoRealmGameManagerFactoryCreateTransaction:
    """Create transactions for AlgoRealmGameManager contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = AlgoRealmGameManagerFactoryCreateTransactionCreate(app_factory)


class AlgoRealmGameManagerFactoryCreateTransactionCreate:
    """Create new instances of AlgoRealmGameManager contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class AlgoRealmGameManagerFactorySend:
    """Send calls to AlgoRealmGameManager contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = AlgoRealmGameManagerFactorySendCreate(app_factory)


class AlgoRealmGameManagerFactorySendCreate:
    """Send create calls to AlgoRealmGameManager contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[AlgoRealmGameManagerClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return AlgoRealmGameManagerClient(result[0]), result[1]

    def initialize_game(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> tuple[AlgoRealmGameManagerClient, algokit_utils.AppFactoryCreateMethodCallResult[str]]:
            """Creates and sends a transaction using the initialize_game()string ABI method"""
            params = params or algokit_utils.CommonAppCallCreateParams()
            client, result = self.app_factory.send.create(
                algokit_utils.AppFactoryCreateMethodCallParams(
                    **{
                    **dataclasses.asdict(params),
                    "method": "initialize_game()string",
                    "args": None,
                    }
                ),
                send_params=send_params,
                compilation_params=compilation_params
            )
            return_value = None if result.abi_return is None else typing.cast(str, result.abi_return)
    
            return AlgoRealmGameManagerClient(client), algokit_utils.AppFactoryCreateMethodCallResult[str](
                **{
                    **result.__dict__,
                    "app_id": result.app_id,
                    "abi_return": return_value,
                    "transaction": result.transaction,
                    "confirmation": result.confirmation,
                    "group_id": result.group_id,
                    "tx_ids": result.tx_ids,
                    "transactions": result.transactions,
                    "confirmations": result.confirmations,
                    "app_address": result.app_address,
                }
            )


class _AlgoRealmGameManagerOptInComposer:
    def __init__(self, composer: "AlgoRealmGameManagerComposer"):
        self.composer = composer
    def register_player(
        self,
        args: tuple[str] | RegisterPlayerArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AlgoRealmGameManagerComposer":
        self.composer._composer.add_app_call_method_call(
            self.composer.client.params.opt_in.register_player(
                args=args,
                params=params,
                
            )
        )
        self.composer._result_mappers.append(
            lambda v: self.composer.client.decode_return_value(
                "register_player(string)string", v
            )
        )
        return self.composer


class AlgoRealmGameManagerComposer:
    """Composer for creating transaction groups for AlgoRealmGameManager contract calls"""

    def __init__(self, client: "AlgoRealmGameManagerClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    @property
    def opt_in(self) -> "_AlgoRealmGameManagerOptInComposer":
        return _AlgoRealmGameManagerOptInComposer(self)

    def register_player(
        self,
        args: tuple[str] | RegisterPlayerArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AlgoRealmGameManagerComposer":
        self._composer.add_app_call_method_call(
            self.client.params.register_player(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "register_player(string)string", v
            )
        )
        return self

    def create_game_item(
        self,
        args: tuple[str | bytes, str, str, str, int, int, str] | CreateGameItemArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AlgoRealmGameManagerComposer":
        self._composer.add_app_call_method_call(
            self.client.params.create_game_item(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "create_game_item(account,string,string,string,uint64,uint64,string)uint64", v
            )
        )
        return self

    def recover_lost_item(
        self,
        args: tuple[int, bytes | str, str | bytes] | RecoverLostItemArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AlgoRealmGameManagerComposer":
        self._composer.add_app_call_method_call(
            self.client.params.recover_lost_item(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "recover_lost_item(asset,byte[],account)uint64", v
            )
        )
        return self

    def seasonal_event_reissue(
        self,
        args: tuple[str, bytes | str, str | bytes] | SeasonalEventReissueArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AlgoRealmGameManagerComposer":
        self._composer.add_app_call_method_call(
            self.client.params.seasonal_event_reissue(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "seasonal_event_reissue(string,byte[],account)uint64", v
            )
        )
        return self

    def craft_items(
        self,
        args: tuple[int, int, int] | CraftItemsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AlgoRealmGameManagerComposer":
        self._composer.add_app_call_method_call(
            self.client.params.craft_items(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "craft_items(asset,asset,uint64)uint64", v
            )
        )
        return self

    def get_player_stats(
        self,
        args: tuple[str | bytes] | GetPlayerStatsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AlgoRealmGameManagerComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_player_stats(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_player_stats(account)(uint64,uint64,uint64)", v
            )
        )
        return self

    def advance_season(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AlgoRealmGameManagerComposer":
        self._composer.add_app_call_method_call(
            self.client.params.advance_season(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "advance_season()uint64", v
            )
        )
        return self

    def get_game_info(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AlgoRealmGameManagerComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_game_info(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_game_info()(uint64,uint64,uint64)", v
            )
        )
        return self

    def claim_item(
        self,
        args: tuple[int] | ClaimItemArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AlgoRealmGameManagerComposer":
        self._composer.add_app_call_method_call(
            self.client.params.claim_item(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "claim_item(asset)string", v
            )
        )
        return self

    def get_recovery_status(
        self,
        args: tuple[str | bytes] | GetRecoveryStatusArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AlgoRealmGameManagerComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_recovery_status(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_recovery_status(account)(uint64,uint64)", v
            )
        )
        return self

    def initialize_game(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AlgoRealmGameManagerComposer":
        self._composer.add_app_call_method_call(
            self.client.params.initialize_game(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "initialize_game()string", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "AlgoRealmGameManagerComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "AlgoRealmGameManagerComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
